// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: noise_monitoring_area.proto

package enviromental_monitoring

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	NoiseMonitoringAreService_CreateNoiseMonitoringArea_FullMethodName = "/enviromental_monitoring.NoiseMonitoringAreService/CreateNoiseMonitoringArea"
	NoiseMonitoringAreService_UpdateNoiseMonitoringArea_FullMethodName = "/enviromental_monitoring.NoiseMonitoringAreService/UpdateNoiseMonitoringArea"
	NoiseMonitoringAreService_DeleteNoiseMonitoringArea_FullMethodName = "/enviromental_monitoring.NoiseMonitoringAreService/DeleteNoiseMonitoringArea"
	NoiseMonitoringAreService_GetNoiseMonitoringArea_FullMethodName    = "/enviromental_monitoring.NoiseMonitoringAreService/GetNoiseMonitoringArea"
)

// NoiseMonitoringAreServiceClient is the client API for NoiseMonitoringAreService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NoiseMonitoringAreServiceClient interface {
	CreateNoiseMonitoringArea(ctx context.Context, in *NoiseAreaCreate, opts ...grpc.CallOption) (*NoiseArea, error)
	UpdateNoiseMonitoringArea(ctx context.Context, in *NoiseAreaCreate, opts ...grpc.CallOption) (*NoiseArea, error)
	DeleteNoiseMonitoringArea(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Void, error)
	GetNoiseMonitoringArea(ctx context.Context, in *ById, opts ...grpc.CallOption) (*NoiseArea, error)
}

type noiseMonitoringAreServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNoiseMonitoringAreServiceClient(cc grpc.ClientConnInterface) NoiseMonitoringAreServiceClient {
	return &noiseMonitoringAreServiceClient{cc}
}

func (c *noiseMonitoringAreServiceClient) CreateNoiseMonitoringArea(ctx context.Context, in *NoiseAreaCreate, opts ...grpc.CallOption) (*NoiseArea, error) {
	out := new(NoiseArea)
	err := c.cc.Invoke(ctx, NoiseMonitoringAreService_CreateNoiseMonitoringArea_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noiseMonitoringAreServiceClient) UpdateNoiseMonitoringArea(ctx context.Context, in *NoiseAreaCreate, opts ...grpc.CallOption) (*NoiseArea, error) {
	out := new(NoiseArea)
	err := c.cc.Invoke(ctx, NoiseMonitoringAreService_UpdateNoiseMonitoringArea_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noiseMonitoringAreServiceClient) DeleteNoiseMonitoringArea(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, NoiseMonitoringAreService_DeleteNoiseMonitoringArea_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noiseMonitoringAreServiceClient) GetNoiseMonitoringArea(ctx context.Context, in *ById, opts ...grpc.CallOption) (*NoiseArea, error) {
	out := new(NoiseArea)
	err := c.cc.Invoke(ctx, NoiseMonitoringAreService_GetNoiseMonitoringArea_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NoiseMonitoringAreServiceServer is the server API for NoiseMonitoringAreService service.
// All implementations must embed UnimplementedNoiseMonitoringAreServiceServer
// for forward compatibility
type NoiseMonitoringAreServiceServer interface {
	CreateNoiseMonitoringArea(context.Context, *NoiseAreaCreate) (*NoiseArea, error)
	UpdateNoiseMonitoringArea(context.Context, *NoiseAreaCreate) (*NoiseArea, error)
	DeleteNoiseMonitoringArea(context.Context, *ById) (*Void, error)
	GetNoiseMonitoringArea(context.Context, *ById) (*NoiseArea, error)
	mustEmbedUnimplementedNoiseMonitoringAreServiceServer()
}

// UnimplementedNoiseMonitoringAreServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNoiseMonitoringAreServiceServer struct {
}

func (UnimplementedNoiseMonitoringAreServiceServer) CreateNoiseMonitoringArea(context.Context, *NoiseAreaCreate) (*NoiseArea, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNoiseMonitoringArea not implemented")
}
func (UnimplementedNoiseMonitoringAreServiceServer) UpdateNoiseMonitoringArea(context.Context, *NoiseAreaCreate) (*NoiseArea, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNoiseMonitoringArea not implemented")
}
func (UnimplementedNoiseMonitoringAreServiceServer) DeleteNoiseMonitoringArea(context.Context, *ById) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNoiseMonitoringArea not implemented")
}
func (UnimplementedNoiseMonitoringAreServiceServer) GetNoiseMonitoringArea(context.Context, *ById) (*NoiseArea, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNoiseMonitoringArea not implemented")
}
func (UnimplementedNoiseMonitoringAreServiceServer) mustEmbedUnimplementedNoiseMonitoringAreServiceServer() {
}

// UnsafeNoiseMonitoringAreServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NoiseMonitoringAreServiceServer will
// result in compilation errors.
type UnsafeNoiseMonitoringAreServiceServer interface {
	mustEmbedUnimplementedNoiseMonitoringAreServiceServer()
}

func RegisterNoiseMonitoringAreServiceServer(s grpc.ServiceRegistrar, srv NoiseMonitoringAreServiceServer) {
	s.RegisterService(&NoiseMonitoringAreService_ServiceDesc, srv)
}

func _NoiseMonitoringAreService_CreateNoiseMonitoringArea_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoiseAreaCreate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoiseMonitoringAreServiceServer).CreateNoiseMonitoringArea(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NoiseMonitoringAreService_CreateNoiseMonitoringArea_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoiseMonitoringAreServiceServer).CreateNoiseMonitoringArea(ctx, req.(*NoiseAreaCreate))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoiseMonitoringAreService_UpdateNoiseMonitoringArea_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoiseAreaCreate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoiseMonitoringAreServiceServer).UpdateNoiseMonitoringArea(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NoiseMonitoringAreService_UpdateNoiseMonitoringArea_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoiseMonitoringAreServiceServer).UpdateNoiseMonitoringArea(ctx, req.(*NoiseAreaCreate))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoiseMonitoringAreService_DeleteNoiseMonitoringArea_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoiseMonitoringAreServiceServer).DeleteNoiseMonitoringArea(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NoiseMonitoringAreService_DeleteNoiseMonitoringArea_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoiseMonitoringAreServiceServer).DeleteNoiseMonitoringArea(ctx, req.(*ById))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoiseMonitoringAreService_GetNoiseMonitoringArea_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoiseMonitoringAreServiceServer).GetNoiseMonitoringArea(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NoiseMonitoringAreService_GetNoiseMonitoringArea_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoiseMonitoringAreServiceServer).GetNoiseMonitoringArea(ctx, req.(*ById))
	}
	return interceptor(ctx, in, info, handler)
}

// NoiseMonitoringAreService_ServiceDesc is the grpc.ServiceDesc for NoiseMonitoringAreService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NoiseMonitoringAreService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "enviromental_monitoring.NoiseMonitoringAreService",
	HandlerType: (*NoiseMonitoringAreServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNoiseMonitoringArea",
			Handler:    _NoiseMonitoringAreService_CreateNoiseMonitoringArea_Handler,
		},
		{
			MethodName: "UpdateNoiseMonitoringArea",
			Handler:    _NoiseMonitoringAreService_UpdateNoiseMonitoringArea_Handler,
		},
		{
			MethodName: "DeleteNoiseMonitoringArea",
			Handler:    _NoiseMonitoringAreService_DeleteNoiseMonitoringArea_Handler,
		},
		{
			MethodName: "GetNoiseMonitoringArea",
			Handler:    _NoiseMonitoringAreService_GetNoiseMonitoringArea_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "noise_monitoring_area.proto",
}
