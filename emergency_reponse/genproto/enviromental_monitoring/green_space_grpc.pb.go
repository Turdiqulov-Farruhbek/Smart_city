// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: green_space.proto

package enviromental_monitoring

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GreenSpaceService_CreateGreenSpace_FullMethodName = "/enviromental_monitoring.GreenSpaceService/CreateGreenSpace"
	GreenSpaceService_GetGreenSpaces_FullMethodName   = "/enviromental_monitoring.GreenSpaceService/GetGreenSpaces"
	GreenSpaceService_UpdateGreenSpace_FullMethodName = "/enviromental_monitoring.GreenSpaceService/UpdateGreenSpace"
	GreenSpaceService_DeleteGreenSpace_FullMethodName = "/enviromental_monitoring.GreenSpaceService/DeleteGreenSpace"
)

// GreenSpaceServiceClient is the client API for GreenSpaceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GreenSpaceServiceClient interface {
	CreateGreenSpace(ctx context.Context, in *GreenSpaceCreate, opts ...grpc.CallOption) (*Void, error)
	GetGreenSpaces(ctx context.Context, in *GreenSpaceFilter, opts ...grpc.CallOption) (*GreenSpaceList, error)
	UpdateGreenSpace(ctx context.Context, in *GreenSpaceCreate, opts ...grpc.CallOption) (*Void, error)
	DeleteGreenSpace(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Void, error)
}

type greenSpaceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGreenSpaceServiceClient(cc grpc.ClientConnInterface) GreenSpaceServiceClient {
	return &greenSpaceServiceClient{cc}
}

func (c *greenSpaceServiceClient) CreateGreenSpace(ctx context.Context, in *GreenSpaceCreate, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, GreenSpaceService_CreateGreenSpace_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greenSpaceServiceClient) GetGreenSpaces(ctx context.Context, in *GreenSpaceFilter, opts ...grpc.CallOption) (*GreenSpaceList, error) {
	out := new(GreenSpaceList)
	err := c.cc.Invoke(ctx, GreenSpaceService_GetGreenSpaces_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greenSpaceServiceClient) UpdateGreenSpace(ctx context.Context, in *GreenSpaceCreate, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, GreenSpaceService_UpdateGreenSpace_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greenSpaceServiceClient) DeleteGreenSpace(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, GreenSpaceService_DeleteGreenSpace_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GreenSpaceServiceServer is the server API for GreenSpaceService service.
// All implementations must embed UnimplementedGreenSpaceServiceServer
// for forward compatibility
type GreenSpaceServiceServer interface {
	CreateGreenSpace(context.Context, *GreenSpaceCreate) (*Void, error)
	GetGreenSpaces(context.Context, *GreenSpaceFilter) (*GreenSpaceList, error)
	UpdateGreenSpace(context.Context, *GreenSpaceCreate) (*Void, error)
	DeleteGreenSpace(context.Context, *ById) (*Void, error)
	mustEmbedUnimplementedGreenSpaceServiceServer()
}

// UnimplementedGreenSpaceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGreenSpaceServiceServer struct {
}

func (UnimplementedGreenSpaceServiceServer) CreateGreenSpace(context.Context, *GreenSpaceCreate) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGreenSpace not implemented")
}
func (UnimplementedGreenSpaceServiceServer) GetGreenSpaces(context.Context, *GreenSpaceFilter) (*GreenSpaceList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGreenSpaces not implemented")
}
func (UnimplementedGreenSpaceServiceServer) UpdateGreenSpace(context.Context, *GreenSpaceCreate) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGreenSpace not implemented")
}
func (UnimplementedGreenSpaceServiceServer) DeleteGreenSpace(context.Context, *ById) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGreenSpace not implemented")
}
func (UnimplementedGreenSpaceServiceServer) mustEmbedUnimplementedGreenSpaceServiceServer() {}

// UnsafeGreenSpaceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GreenSpaceServiceServer will
// result in compilation errors.
type UnsafeGreenSpaceServiceServer interface {
	mustEmbedUnimplementedGreenSpaceServiceServer()
}

func RegisterGreenSpaceServiceServer(s grpc.ServiceRegistrar, srv GreenSpaceServiceServer) {
	s.RegisterService(&GreenSpaceService_ServiceDesc, srv)
}

func _GreenSpaceService_CreateGreenSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GreenSpaceCreate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreenSpaceServiceServer).CreateGreenSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GreenSpaceService_CreateGreenSpace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreenSpaceServiceServer).CreateGreenSpace(ctx, req.(*GreenSpaceCreate))
	}
	return interceptor(ctx, in, info, handler)
}

func _GreenSpaceService_GetGreenSpaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GreenSpaceFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreenSpaceServiceServer).GetGreenSpaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GreenSpaceService_GetGreenSpaces_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreenSpaceServiceServer).GetGreenSpaces(ctx, req.(*GreenSpaceFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _GreenSpaceService_UpdateGreenSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GreenSpaceCreate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreenSpaceServiceServer).UpdateGreenSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GreenSpaceService_UpdateGreenSpace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreenSpaceServiceServer).UpdateGreenSpace(ctx, req.(*GreenSpaceCreate))
	}
	return interceptor(ctx, in, info, handler)
}

func _GreenSpaceService_DeleteGreenSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreenSpaceServiceServer).DeleteGreenSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GreenSpaceService_DeleteGreenSpace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreenSpaceServiceServer).DeleteGreenSpace(ctx, req.(*ById))
	}
	return interceptor(ctx, in, info, handler)
}

// GreenSpaceService_ServiceDesc is the grpc.ServiceDesc for GreenSpaceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GreenSpaceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "enviromental_monitoring.GreenSpaceService",
	HandlerType: (*GreenSpaceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateGreenSpace",
			Handler:    _GreenSpaceService_CreateGreenSpace_Handler,
		},
		{
			MethodName: "GetGreenSpaces",
			Handler:    _GreenSpaceService_GetGreenSpaces_Handler,
		},
		{
			MethodName: "UpdateGreenSpace",
			Handler:    _GreenSpaceService_UpdateGreenSpace_Handler,
		},
		{
			MethodName: "DeleteGreenSpace",
			Handler:    _GreenSpaceService_DeleteGreenSpace_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "green_space.proto",
}
