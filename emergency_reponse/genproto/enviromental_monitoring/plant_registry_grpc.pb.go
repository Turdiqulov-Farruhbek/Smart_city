// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: plant_registry.proto

package enviromental_monitoring

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PlantRegistryService_RegisterPlants_FullMethodName      = "/enviromental_monitoring.PlantRegistryService/RegisterPlants"
	PlantRegistryService_GetPlantRegistries_FullMethodName  = "/enviromental_monitoring.PlantRegistryService/GetPlantRegistries"
	PlantRegistryService_UpdatePlantRegistry_FullMethodName = "/enviromental_monitoring.PlantRegistryService/UpdatePlantRegistry"
	PlantRegistryService_DeletePlantRegistry_FullMethodName = "/enviromental_monitoring.PlantRegistryService/DeletePlantRegistry"
)

// PlantRegistryServiceClient is the client API for PlantRegistryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PlantRegistryServiceClient interface {
	RegisterPlants(ctx context.Context, in *PlantRegistry, opts ...grpc.CallOption) (*Void, error)
	GetPlantRegistries(ctx context.Context, in *PlantRegistryFilter, opts ...grpc.CallOption) (*PlantRegistryList, error)
	UpdatePlantRegistry(ctx context.Context, in *PlantRegistry, opts ...grpc.CallOption) (*Void, error)
	DeletePlantRegistry(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Void, error)
}

type plantRegistryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPlantRegistryServiceClient(cc grpc.ClientConnInterface) PlantRegistryServiceClient {
	return &plantRegistryServiceClient{cc}
}

func (c *plantRegistryServiceClient) RegisterPlants(ctx context.Context, in *PlantRegistry, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, PlantRegistryService_RegisterPlants_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plantRegistryServiceClient) GetPlantRegistries(ctx context.Context, in *PlantRegistryFilter, opts ...grpc.CallOption) (*PlantRegistryList, error) {
	out := new(PlantRegistryList)
	err := c.cc.Invoke(ctx, PlantRegistryService_GetPlantRegistries_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plantRegistryServiceClient) UpdatePlantRegistry(ctx context.Context, in *PlantRegistry, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, PlantRegistryService_UpdatePlantRegistry_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plantRegistryServiceClient) DeletePlantRegistry(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, PlantRegistryService_DeletePlantRegistry_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlantRegistryServiceServer is the server API for PlantRegistryService service.
// All implementations must embed UnimplementedPlantRegistryServiceServer
// for forward compatibility
type PlantRegistryServiceServer interface {
	RegisterPlants(context.Context, *PlantRegistry) (*Void, error)
	GetPlantRegistries(context.Context, *PlantRegistryFilter) (*PlantRegistryList, error)
	UpdatePlantRegistry(context.Context, *PlantRegistry) (*Void, error)
	DeletePlantRegistry(context.Context, *ById) (*Void, error)
	mustEmbedUnimplementedPlantRegistryServiceServer()
}

// UnimplementedPlantRegistryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPlantRegistryServiceServer struct {
}

func (UnimplementedPlantRegistryServiceServer) RegisterPlants(context.Context, *PlantRegistry) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterPlants not implemented")
}
func (UnimplementedPlantRegistryServiceServer) GetPlantRegistries(context.Context, *PlantRegistryFilter) (*PlantRegistryList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlantRegistries not implemented")
}
func (UnimplementedPlantRegistryServiceServer) UpdatePlantRegistry(context.Context, *PlantRegistry) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePlantRegistry not implemented")
}
func (UnimplementedPlantRegistryServiceServer) DeletePlantRegistry(context.Context, *ById) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePlantRegistry not implemented")
}
func (UnimplementedPlantRegistryServiceServer) mustEmbedUnimplementedPlantRegistryServiceServer() {}

// UnsafePlantRegistryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlantRegistryServiceServer will
// result in compilation errors.
type UnsafePlantRegistryServiceServer interface {
	mustEmbedUnimplementedPlantRegistryServiceServer()
}

func RegisterPlantRegistryServiceServer(s grpc.ServiceRegistrar, srv PlantRegistryServiceServer) {
	s.RegisterService(&PlantRegistryService_ServiceDesc, srv)
}

func _PlantRegistryService_RegisterPlants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlantRegistry)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlantRegistryServiceServer).RegisterPlants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlantRegistryService_RegisterPlants_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlantRegistryServiceServer).RegisterPlants(ctx, req.(*PlantRegistry))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlantRegistryService_GetPlantRegistries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlantRegistryFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlantRegistryServiceServer).GetPlantRegistries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlantRegistryService_GetPlantRegistries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlantRegistryServiceServer).GetPlantRegistries(ctx, req.(*PlantRegistryFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlantRegistryService_UpdatePlantRegistry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlantRegistry)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlantRegistryServiceServer).UpdatePlantRegistry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlantRegistryService_UpdatePlantRegistry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlantRegistryServiceServer).UpdatePlantRegistry(ctx, req.(*PlantRegistry))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlantRegistryService_DeletePlantRegistry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlantRegistryServiceServer).DeletePlantRegistry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlantRegistryService_DeletePlantRegistry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlantRegistryServiceServer).DeletePlantRegistry(ctx, req.(*ById))
	}
	return interceptor(ctx, in, info, handler)
}

// PlantRegistryService_ServiceDesc is the grpc.ServiceDesc for PlantRegistryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PlantRegistryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "enviromental_monitoring.PlantRegistryService",
	HandlerType: (*PlantRegistryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterPlants",
			Handler:    _PlantRegistryService_RegisterPlants_Handler,
		},
		{
			MethodName: "GetPlantRegistries",
			Handler:    _PlantRegistryService_GetPlantRegistries_Handler,
		},
		{
			MethodName: "UpdatePlantRegistry",
			Handler:    _PlantRegistryService_UpdatePlantRegistry_Handler,
		},
		{
			MethodName: "DeletePlantRegistry",
			Handler:    _PlantRegistryService_DeletePlantRegistry_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "plant_registry.proto",
}
