// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: waste_schedule.proto

package enviromental_monitoring

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	WasteCollectionService_CreateWasteCollectionSchedule_FullMethodName = "/enviromental_monitoring.WasteCollectionService/CreateWasteCollectionSchedule"
	WasteCollectionService_UpdateWasteCollectionSchedule_FullMethodName = "/enviromental_monitoring.WasteCollectionService/UpdateWasteCollectionSchedule"
	WasteCollectionService_DeleteWasteCollectionSchedule_FullMethodName = "/enviromental_monitoring.WasteCollectionService/DeleteWasteCollectionSchedule"
	WasteCollectionService_GetWasteCollectionSchedules_FullMethodName   = "/enviromental_monitoring.WasteCollectionService/GetWasteCollectionSchedules"
)

// WasteCollectionServiceClient is the client API for WasteCollectionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WasteCollectionServiceClient interface {
	CreateWasteCollectionSchedule(ctx context.Context, in *WasteCollectionScheduleCreate, opts ...grpc.CallOption) (*Void, error)
	UpdateWasteCollectionSchedule(ctx context.Context, in *WasteCollectionScheduleCreate, opts ...grpc.CallOption) (*Void, error)
	DeleteWasteCollectionSchedule(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Void, error)
	GetWasteCollectionSchedules(ctx context.Context, in *WasteScheduleFilter, opts ...grpc.CallOption) (*WasteScheduleList, error)
}

type wasteCollectionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWasteCollectionServiceClient(cc grpc.ClientConnInterface) WasteCollectionServiceClient {
	return &wasteCollectionServiceClient{cc}
}

func (c *wasteCollectionServiceClient) CreateWasteCollectionSchedule(ctx context.Context, in *WasteCollectionScheduleCreate, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, WasteCollectionService_CreateWasteCollectionSchedule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wasteCollectionServiceClient) UpdateWasteCollectionSchedule(ctx context.Context, in *WasteCollectionScheduleCreate, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, WasteCollectionService_UpdateWasteCollectionSchedule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wasteCollectionServiceClient) DeleteWasteCollectionSchedule(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, WasteCollectionService_DeleteWasteCollectionSchedule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wasteCollectionServiceClient) GetWasteCollectionSchedules(ctx context.Context, in *WasteScheduleFilter, opts ...grpc.CallOption) (*WasteScheduleList, error) {
	out := new(WasteScheduleList)
	err := c.cc.Invoke(ctx, WasteCollectionService_GetWasteCollectionSchedules_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WasteCollectionServiceServer is the server API for WasteCollectionService service.
// All implementations must embed UnimplementedWasteCollectionServiceServer
// for forward compatibility
type WasteCollectionServiceServer interface {
	CreateWasteCollectionSchedule(context.Context, *WasteCollectionScheduleCreate) (*Void, error)
	UpdateWasteCollectionSchedule(context.Context, *WasteCollectionScheduleCreate) (*Void, error)
	DeleteWasteCollectionSchedule(context.Context, *ById) (*Void, error)
	GetWasteCollectionSchedules(context.Context, *WasteScheduleFilter) (*WasteScheduleList, error)
	mustEmbedUnimplementedWasteCollectionServiceServer()
}

// UnimplementedWasteCollectionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWasteCollectionServiceServer struct {
}

func (UnimplementedWasteCollectionServiceServer) CreateWasteCollectionSchedule(context.Context, *WasteCollectionScheduleCreate) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWasteCollectionSchedule not implemented")
}
func (UnimplementedWasteCollectionServiceServer) UpdateWasteCollectionSchedule(context.Context, *WasteCollectionScheduleCreate) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWasteCollectionSchedule not implemented")
}
func (UnimplementedWasteCollectionServiceServer) DeleteWasteCollectionSchedule(context.Context, *ById) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWasteCollectionSchedule not implemented")
}
func (UnimplementedWasteCollectionServiceServer) GetWasteCollectionSchedules(context.Context, *WasteScheduleFilter) (*WasteScheduleList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWasteCollectionSchedules not implemented")
}
func (UnimplementedWasteCollectionServiceServer) mustEmbedUnimplementedWasteCollectionServiceServer() {
}

// UnsafeWasteCollectionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WasteCollectionServiceServer will
// result in compilation errors.
type UnsafeWasteCollectionServiceServer interface {
	mustEmbedUnimplementedWasteCollectionServiceServer()
}

func RegisterWasteCollectionServiceServer(s grpc.ServiceRegistrar, srv WasteCollectionServiceServer) {
	s.RegisterService(&WasteCollectionService_ServiceDesc, srv)
}

func _WasteCollectionService_CreateWasteCollectionSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WasteCollectionScheduleCreate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WasteCollectionServiceServer).CreateWasteCollectionSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WasteCollectionService_CreateWasteCollectionSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WasteCollectionServiceServer).CreateWasteCollectionSchedule(ctx, req.(*WasteCollectionScheduleCreate))
	}
	return interceptor(ctx, in, info, handler)
}

func _WasteCollectionService_UpdateWasteCollectionSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WasteCollectionScheduleCreate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WasteCollectionServiceServer).UpdateWasteCollectionSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WasteCollectionService_UpdateWasteCollectionSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WasteCollectionServiceServer).UpdateWasteCollectionSchedule(ctx, req.(*WasteCollectionScheduleCreate))
	}
	return interceptor(ctx, in, info, handler)
}

func _WasteCollectionService_DeleteWasteCollectionSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WasteCollectionServiceServer).DeleteWasteCollectionSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WasteCollectionService_DeleteWasteCollectionSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WasteCollectionServiceServer).DeleteWasteCollectionSchedule(ctx, req.(*ById))
	}
	return interceptor(ctx, in, info, handler)
}

func _WasteCollectionService_GetWasteCollectionSchedules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WasteScheduleFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WasteCollectionServiceServer).GetWasteCollectionSchedules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WasteCollectionService_GetWasteCollectionSchedules_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WasteCollectionServiceServer).GetWasteCollectionSchedules(ctx, req.(*WasteScheduleFilter))
	}
	return interceptor(ctx, in, info, handler)
}

// WasteCollectionService_ServiceDesc is the grpc.ServiceDesc for WasteCollectionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WasteCollectionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "enviromental_monitoring.WasteCollectionService",
	HandlerType: (*WasteCollectionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateWasteCollectionSchedule",
			Handler:    _WasteCollectionService_CreateWasteCollectionSchedule_Handler,
		},
		{
			MethodName: "UpdateWasteCollectionSchedule",
			Handler:    _WasteCollectionService_UpdateWasteCollectionSchedule_Handler,
		},
		{
			MethodName: "DeleteWasteCollectionSchedule",
			Handler:    _WasteCollectionService_DeleteWasteCollectionSchedule_Handler,
		},
		{
			MethodName: "GetWasteCollectionSchedules",
			Handler:    _WasteCollectionService_GetWasteCollectionSchedules_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "waste_schedule.proto",
}
