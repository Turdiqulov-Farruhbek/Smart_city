// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: drill.proto

package emergency_response

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	EmergencyDrillService_Create_FullMethodName  = "/emergency_response.EmergencyDrillService/Create"
	EmergencyDrillService_GetById_FullMethodName = "/emergency_response.EmergencyDrillService/GetById"
	EmergencyDrillService_GetAll_FullMethodName  = "/emergency_response.EmergencyDrillService/GetAll"
	EmergencyDrillService_Update_FullMethodName  = "/emergency_response.EmergencyDrillService/Update"
	EmergencyDrillService_Delete_FullMethodName  = "/emergency_response.EmergencyDrillService/Delete"
)

// EmergencyDrillServiceClient is the client API for EmergencyDrillService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EmergencyDrillServiceClient interface {
	Create(ctx context.Context, in *DrillsCreateReq, opts ...grpc.CallOption) (*DrillsRes, error)
	GetById(ctx context.Context, in *ById, opts ...grpc.CallOption) (*DrillsGetByIdRes, error)
	GetAll(ctx context.Context, in *Filter, opts ...grpc.CallOption) (*DrillsGetAllRes, error)
	Update(ctx context.Context, in *DrillsUpdateReq, opts ...grpc.CallOption) (*DrillsRes, error)
	Delete(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Void, error)
}

type emergencyDrillServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEmergencyDrillServiceClient(cc grpc.ClientConnInterface) EmergencyDrillServiceClient {
	return &emergencyDrillServiceClient{cc}
}

func (c *emergencyDrillServiceClient) Create(ctx context.Context, in *DrillsCreateReq, opts ...grpc.CallOption) (*DrillsRes, error) {
	out := new(DrillsRes)
	err := c.cc.Invoke(ctx, EmergencyDrillService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emergencyDrillServiceClient) GetById(ctx context.Context, in *ById, opts ...grpc.CallOption) (*DrillsGetByIdRes, error) {
	out := new(DrillsGetByIdRes)
	err := c.cc.Invoke(ctx, EmergencyDrillService_GetById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emergencyDrillServiceClient) GetAll(ctx context.Context, in *Filter, opts ...grpc.CallOption) (*DrillsGetAllRes, error) {
	out := new(DrillsGetAllRes)
	err := c.cc.Invoke(ctx, EmergencyDrillService_GetAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emergencyDrillServiceClient) Update(ctx context.Context, in *DrillsUpdateReq, opts ...grpc.CallOption) (*DrillsRes, error) {
	out := new(DrillsRes)
	err := c.cc.Invoke(ctx, EmergencyDrillService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emergencyDrillServiceClient) Delete(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, EmergencyDrillService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EmergencyDrillServiceServer is the server API for EmergencyDrillService service.
// All implementations must embed UnimplementedEmergencyDrillServiceServer
// for forward compatibility
type EmergencyDrillServiceServer interface {
	Create(context.Context, *DrillsCreateReq) (*DrillsRes, error)
	GetById(context.Context, *ById) (*DrillsGetByIdRes, error)
	GetAll(context.Context, *Filter) (*DrillsGetAllRes, error)
	Update(context.Context, *DrillsUpdateReq) (*DrillsRes, error)
	Delete(context.Context, *ById) (*Void, error)
	mustEmbedUnimplementedEmergencyDrillServiceServer()
}

// UnimplementedEmergencyDrillServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEmergencyDrillServiceServer struct {
}

func (UnimplementedEmergencyDrillServiceServer) Create(context.Context, *DrillsCreateReq) (*DrillsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedEmergencyDrillServiceServer) GetById(context.Context, *ById) (*DrillsGetByIdRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedEmergencyDrillServiceServer) GetAll(context.Context, *Filter) (*DrillsGetAllRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedEmergencyDrillServiceServer) Update(context.Context, *DrillsUpdateReq) (*DrillsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedEmergencyDrillServiceServer) Delete(context.Context, *ById) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedEmergencyDrillServiceServer) mustEmbedUnimplementedEmergencyDrillServiceServer() {}

// UnsafeEmergencyDrillServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EmergencyDrillServiceServer will
// result in compilation errors.
type UnsafeEmergencyDrillServiceServer interface {
	mustEmbedUnimplementedEmergencyDrillServiceServer()
}

func RegisterEmergencyDrillServiceServer(s grpc.ServiceRegistrar, srv EmergencyDrillServiceServer) {
	s.RegisterService(&EmergencyDrillService_ServiceDesc, srv)
}

func _EmergencyDrillService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DrillsCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmergencyDrillServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmergencyDrillService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmergencyDrillServiceServer).Create(ctx, req.(*DrillsCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmergencyDrillService_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmergencyDrillServiceServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmergencyDrillService_GetById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmergencyDrillServiceServer).GetById(ctx, req.(*ById))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmergencyDrillService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Filter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmergencyDrillServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmergencyDrillService_GetAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmergencyDrillServiceServer).GetAll(ctx, req.(*Filter))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmergencyDrillService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DrillsUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmergencyDrillServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmergencyDrillService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmergencyDrillServiceServer).Update(ctx, req.(*DrillsUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmergencyDrillService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmergencyDrillServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmergencyDrillService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmergencyDrillServiceServer).Delete(ctx, req.(*ById))
	}
	return interceptor(ctx, in, info, handler)
}

// EmergencyDrillService_ServiceDesc is the grpc.ServiceDesc for EmergencyDrillService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EmergencyDrillService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "emergency_response.EmergencyDrillService",
	HandlerType: (*EmergencyDrillServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _EmergencyDrillService_Create_Handler,
		},
		{
			MethodName: "GetById",
			Handler:    _EmergencyDrillService_GetById_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _EmergencyDrillService_GetAll_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _EmergencyDrillService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _EmergencyDrillService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "drill.proto",
}
