// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: building.proto

package energy_management

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BuildingService_CreateBuilding_FullMethodName = "/energy_management.BuildingService/CreateBuilding"
	BuildingService_UpdateBuilding_FullMethodName = "/energy_management.BuildingService/UpdateBuilding"
	BuildingService_DeleteBuilding_FullMethodName = "/energy_management.BuildingService/DeleteBuilding"
	BuildingService_GetBuilding_FullMethodName    = "/energy_management.BuildingService/GetBuilding"
)

// BuildingServiceClient is the client API for BuildingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BuildingServiceClient interface {
	CreateBuilding(ctx context.Context, in *BuildingCreate, opts ...grpc.CallOption) (*Building, error)
	UpdateBuilding(ctx context.Context, in *BuildingCreate, opts ...grpc.CallOption) (*Building, error)
	DeleteBuilding(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Void, error)
	GetBuilding(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Building, error)
}

type buildingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBuildingServiceClient(cc grpc.ClientConnInterface) BuildingServiceClient {
	return &buildingServiceClient{cc}
}

func (c *buildingServiceClient) CreateBuilding(ctx context.Context, in *BuildingCreate, opts ...grpc.CallOption) (*Building, error) {
	out := new(Building)
	err := c.cc.Invoke(ctx, BuildingService_CreateBuilding_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buildingServiceClient) UpdateBuilding(ctx context.Context, in *BuildingCreate, opts ...grpc.CallOption) (*Building, error) {
	out := new(Building)
	err := c.cc.Invoke(ctx, BuildingService_UpdateBuilding_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buildingServiceClient) DeleteBuilding(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, BuildingService_DeleteBuilding_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buildingServiceClient) GetBuilding(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Building, error) {
	out := new(Building)
	err := c.cc.Invoke(ctx, BuildingService_GetBuilding_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BuildingServiceServer is the server API for BuildingService service.
// All implementations must embed UnimplementedBuildingServiceServer
// for forward compatibility
type BuildingServiceServer interface {
	CreateBuilding(context.Context, *BuildingCreate) (*Building, error)
	UpdateBuilding(context.Context, *BuildingCreate) (*Building, error)
	DeleteBuilding(context.Context, *ById) (*Void, error)
	GetBuilding(context.Context, *ById) (*Building, error)
	mustEmbedUnimplementedBuildingServiceServer()
}

// UnimplementedBuildingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBuildingServiceServer struct {
}

func (UnimplementedBuildingServiceServer) CreateBuilding(context.Context, *BuildingCreate) (*Building, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBuilding not implemented")
}
func (UnimplementedBuildingServiceServer) UpdateBuilding(context.Context, *BuildingCreate) (*Building, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBuilding not implemented")
}
func (UnimplementedBuildingServiceServer) DeleteBuilding(context.Context, *ById) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBuilding not implemented")
}
func (UnimplementedBuildingServiceServer) GetBuilding(context.Context, *ById) (*Building, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBuilding not implemented")
}
func (UnimplementedBuildingServiceServer) mustEmbedUnimplementedBuildingServiceServer() {}

// UnsafeBuildingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BuildingServiceServer will
// result in compilation errors.
type UnsafeBuildingServiceServer interface {
	mustEmbedUnimplementedBuildingServiceServer()
}

func RegisterBuildingServiceServer(s grpc.ServiceRegistrar, srv BuildingServiceServer) {
	s.RegisterService(&BuildingService_ServiceDesc, srv)
}

func _BuildingService_CreateBuilding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuildingCreate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuildingServiceServer).CreateBuilding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BuildingService_CreateBuilding_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuildingServiceServer).CreateBuilding(ctx, req.(*BuildingCreate))
	}
	return interceptor(ctx, in, info, handler)
}

func _BuildingService_UpdateBuilding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuildingCreate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuildingServiceServer).UpdateBuilding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BuildingService_UpdateBuilding_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuildingServiceServer).UpdateBuilding(ctx, req.(*BuildingCreate))
	}
	return interceptor(ctx, in, info, handler)
}

func _BuildingService_DeleteBuilding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuildingServiceServer).DeleteBuilding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BuildingService_DeleteBuilding_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuildingServiceServer).DeleteBuilding(ctx, req.(*ById))
	}
	return interceptor(ctx, in, info, handler)
}

func _BuildingService_GetBuilding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuildingServiceServer).GetBuilding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BuildingService_GetBuilding_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuildingServiceServer).GetBuilding(ctx, req.(*ById))
	}
	return interceptor(ctx, in, info, handler)
}

// BuildingService_ServiceDesc is the grpc.ServiceDesc for BuildingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BuildingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "energy_management.BuildingService",
	HandlerType: (*BuildingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBuilding",
			Handler:    _BuildingService_CreateBuilding_Handler,
		},
		{
			MethodName: "UpdateBuilding",
			Handler:    _BuildingService_UpdateBuilding_Handler,
		},
		{
			MethodName: "DeleteBuilding",
			Handler:    _BuildingService_DeleteBuilding_Handler,
		},
		{
			MethodName: "GetBuilding",
			Handler:    _BuildingService_GetBuilding_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "building.proto",
}
