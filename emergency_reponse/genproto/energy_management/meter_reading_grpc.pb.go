// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: meter_reading.proto

package energy_management

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MeterReadingService_CreateMeterReading_FullMethodName         = "/energy_management.MeterReadingService/CreateMeterReading"
	MeterReadingService_GetMeterReading_FullMethodName            = "/energy_management.MeterReadingService/GetMeterReading"
	MeterReadingService_UpdateMeterReading_FullMethodName         = "/energy_management.MeterReadingService/UpdateMeterReading"
	MeterReadingService_GetHourlyEnergyForBuilding_FullMethodName = "/energy_management.MeterReadingService/GetHourlyEnergyForBuilding"
	MeterReadingService_GetDailyEnergyForBuilding_FullMethodName  = "/energy_management.MeterReadingService/GetDailyEnergyForBuilding"
	MeterReadingService_DeleteMeterReading_FullMethodName         = "/energy_management.MeterReadingService/DeleteMeterReading"
)

// MeterReadingServiceClient is the client API for MeterReadingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MeterReadingServiceClient interface {
	CreateMeterReading(ctx context.Context, in *MeterReading, opts ...grpc.CallOption) (*Void, error)
	GetMeterReading(ctx context.Context, in *ById, opts ...grpc.CallOption) (*MeterReading, error)
	UpdateMeterReading(ctx context.Context, in *MeterReading, opts ...grpc.CallOption) (*Void, error)
	GetHourlyEnergyForBuilding(ctx context.Context, in *ByHour, opts ...grpc.CallOption) (*EnergyReportBuilding, error)
	GetDailyEnergyForBuilding(ctx context.Context, in *ById, opts ...grpc.CallOption) (*EnergyReportBuilding, error)
	DeleteMeterReading(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Void, error)
}

type meterReadingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMeterReadingServiceClient(cc grpc.ClientConnInterface) MeterReadingServiceClient {
	return &meterReadingServiceClient{cc}
}

func (c *meterReadingServiceClient) CreateMeterReading(ctx context.Context, in *MeterReading, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, MeterReadingService_CreateMeterReading_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meterReadingServiceClient) GetMeterReading(ctx context.Context, in *ById, opts ...grpc.CallOption) (*MeterReading, error) {
	out := new(MeterReading)
	err := c.cc.Invoke(ctx, MeterReadingService_GetMeterReading_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meterReadingServiceClient) UpdateMeterReading(ctx context.Context, in *MeterReading, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, MeterReadingService_UpdateMeterReading_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meterReadingServiceClient) GetHourlyEnergyForBuilding(ctx context.Context, in *ByHour, opts ...grpc.CallOption) (*EnergyReportBuilding, error) {
	out := new(EnergyReportBuilding)
	err := c.cc.Invoke(ctx, MeterReadingService_GetHourlyEnergyForBuilding_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meterReadingServiceClient) GetDailyEnergyForBuilding(ctx context.Context, in *ById, opts ...grpc.CallOption) (*EnergyReportBuilding, error) {
	out := new(EnergyReportBuilding)
	err := c.cc.Invoke(ctx, MeterReadingService_GetDailyEnergyForBuilding_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meterReadingServiceClient) DeleteMeterReading(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, MeterReadingService_DeleteMeterReading_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MeterReadingServiceServer is the server API for MeterReadingService service.
// All implementations must embed UnimplementedMeterReadingServiceServer
// for forward compatibility
type MeterReadingServiceServer interface {
	CreateMeterReading(context.Context, *MeterReading) (*Void, error)
	GetMeterReading(context.Context, *ById) (*MeterReading, error)
	UpdateMeterReading(context.Context, *MeterReading) (*Void, error)
	GetHourlyEnergyForBuilding(context.Context, *ByHour) (*EnergyReportBuilding, error)
	GetDailyEnergyForBuilding(context.Context, *ById) (*EnergyReportBuilding, error)
	DeleteMeterReading(context.Context, *ById) (*Void, error)
	mustEmbedUnimplementedMeterReadingServiceServer()
}

// UnimplementedMeterReadingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMeterReadingServiceServer struct {
}

func (UnimplementedMeterReadingServiceServer) CreateMeterReading(context.Context, *MeterReading) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMeterReading not implemented")
}
func (UnimplementedMeterReadingServiceServer) GetMeterReading(context.Context, *ById) (*MeterReading, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMeterReading not implemented")
}
func (UnimplementedMeterReadingServiceServer) UpdateMeterReading(context.Context, *MeterReading) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMeterReading not implemented")
}
func (UnimplementedMeterReadingServiceServer) GetHourlyEnergyForBuilding(context.Context, *ByHour) (*EnergyReportBuilding, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHourlyEnergyForBuilding not implemented")
}
func (UnimplementedMeterReadingServiceServer) GetDailyEnergyForBuilding(context.Context, *ById) (*EnergyReportBuilding, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDailyEnergyForBuilding not implemented")
}
func (UnimplementedMeterReadingServiceServer) DeleteMeterReading(context.Context, *ById) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMeterReading not implemented")
}
func (UnimplementedMeterReadingServiceServer) mustEmbedUnimplementedMeterReadingServiceServer() {}

// UnsafeMeterReadingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MeterReadingServiceServer will
// result in compilation errors.
type UnsafeMeterReadingServiceServer interface {
	mustEmbedUnimplementedMeterReadingServiceServer()
}

func RegisterMeterReadingServiceServer(s grpc.ServiceRegistrar, srv MeterReadingServiceServer) {
	s.RegisterService(&MeterReadingService_ServiceDesc, srv)
}

func _MeterReadingService_CreateMeterReading_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MeterReading)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeterReadingServiceServer).CreateMeterReading(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MeterReadingService_CreateMeterReading_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeterReadingServiceServer).CreateMeterReading(ctx, req.(*MeterReading))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeterReadingService_GetMeterReading_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeterReadingServiceServer).GetMeterReading(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MeterReadingService_GetMeterReading_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeterReadingServiceServer).GetMeterReading(ctx, req.(*ById))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeterReadingService_UpdateMeterReading_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MeterReading)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeterReadingServiceServer).UpdateMeterReading(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MeterReadingService_UpdateMeterReading_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeterReadingServiceServer).UpdateMeterReading(ctx, req.(*MeterReading))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeterReadingService_GetHourlyEnergyForBuilding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByHour)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeterReadingServiceServer).GetHourlyEnergyForBuilding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MeterReadingService_GetHourlyEnergyForBuilding_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeterReadingServiceServer).GetHourlyEnergyForBuilding(ctx, req.(*ByHour))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeterReadingService_GetDailyEnergyForBuilding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeterReadingServiceServer).GetDailyEnergyForBuilding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MeterReadingService_GetDailyEnergyForBuilding_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeterReadingServiceServer).GetDailyEnergyForBuilding(ctx, req.(*ById))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeterReadingService_DeleteMeterReading_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeterReadingServiceServer).DeleteMeterReading(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MeterReadingService_DeleteMeterReading_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeterReadingServiceServer).DeleteMeterReading(ctx, req.(*ById))
	}
	return interceptor(ctx, in, info, handler)
}

// MeterReadingService_ServiceDesc is the grpc.ServiceDesc for MeterReadingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MeterReadingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "energy_management.MeterReadingService",
	HandlerType: (*MeterReadingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMeterReading",
			Handler:    _MeterReadingService_CreateMeterReading_Handler,
		},
		{
			MethodName: "GetMeterReading",
			Handler:    _MeterReadingService_GetMeterReading_Handler,
		},
		{
			MethodName: "UpdateMeterReading",
			Handler:    _MeterReadingService_UpdateMeterReading_Handler,
		},
		{
			MethodName: "GetHourlyEnergyForBuilding",
			Handler:    _MeterReadingService_GetHourlyEnergyForBuilding_Handler,
		},
		{
			MethodName: "GetDailyEnergyForBuilding",
			Handler:    _MeterReadingService_GetDailyEnergyForBuilding_Handler,
		},
		{
			MethodName: "DeleteMeterReading",
			Handler:    _MeterReadingService_DeleteMeterReading_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "meter_reading.proto",
}
