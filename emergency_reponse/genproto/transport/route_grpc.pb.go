// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: route.proto

package transport

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RouteService_CreateTransportRoute_FullMethodName  = "/transport.RouteService/CreateTransportRoute"
	RouteService_GetAllTrasnportRoutes_FullMethodName = "/transport.RouteService/GetAllTrasnportRoutes"
	RouteService_CreateSchedule_FullMethodName        = "/transport.RouteService/CreateSchedule"
	RouteService_GetScheduleForRoute_FullMethodName   = "/transport.RouteService/GetScheduleForRoute"
)

// RouteServiceClient is the client API for RouteService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RouteServiceClient interface {
	CreateTransportRoute(ctx context.Context, in *RouteCreate, opts ...grpc.CallOption) (*Route, error)
	GetAllTrasnportRoutes(ctx context.Context, in *RouteFilter, opts ...grpc.CallOption) (*RouteList, error)
	CreateSchedule(ctx context.Context, in *RouteScheduleCreate, opts ...grpc.CallOption) (*RouteSchedule, error)
	GetScheduleForRoute(ctx context.Context, in *ById, opts ...grpc.CallOption) (*RouteScheduleList, error)
}

type routeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRouteServiceClient(cc grpc.ClientConnInterface) RouteServiceClient {
	return &routeServiceClient{cc}
}

func (c *routeServiceClient) CreateTransportRoute(ctx context.Context, in *RouteCreate, opts ...grpc.CallOption) (*Route, error) {
	out := new(Route)
	err := c.cc.Invoke(ctx, RouteService_CreateTransportRoute_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routeServiceClient) GetAllTrasnportRoutes(ctx context.Context, in *RouteFilter, opts ...grpc.CallOption) (*RouteList, error) {
	out := new(RouteList)
	err := c.cc.Invoke(ctx, RouteService_GetAllTrasnportRoutes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routeServiceClient) CreateSchedule(ctx context.Context, in *RouteScheduleCreate, opts ...grpc.CallOption) (*RouteSchedule, error) {
	out := new(RouteSchedule)
	err := c.cc.Invoke(ctx, RouteService_CreateSchedule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routeServiceClient) GetScheduleForRoute(ctx context.Context, in *ById, opts ...grpc.CallOption) (*RouteScheduleList, error) {
	out := new(RouteScheduleList)
	err := c.cc.Invoke(ctx, RouteService_GetScheduleForRoute_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RouteServiceServer is the server API for RouteService service.
// All implementations must embed UnimplementedRouteServiceServer
// for forward compatibility
type RouteServiceServer interface {
	CreateTransportRoute(context.Context, *RouteCreate) (*Route, error)
	GetAllTrasnportRoutes(context.Context, *RouteFilter) (*RouteList, error)
	CreateSchedule(context.Context, *RouteScheduleCreate) (*RouteSchedule, error)
	GetScheduleForRoute(context.Context, *ById) (*RouteScheduleList, error)
	mustEmbedUnimplementedRouteServiceServer()
}

// UnimplementedRouteServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRouteServiceServer struct {
}

func (UnimplementedRouteServiceServer) CreateTransportRoute(context.Context, *RouteCreate) (*Route, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTransportRoute not implemented")
}
func (UnimplementedRouteServiceServer) GetAllTrasnportRoutes(context.Context, *RouteFilter) (*RouteList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllTrasnportRoutes not implemented")
}
func (UnimplementedRouteServiceServer) CreateSchedule(context.Context, *RouteScheduleCreate) (*RouteSchedule, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSchedule not implemented")
}
func (UnimplementedRouteServiceServer) GetScheduleForRoute(context.Context, *ById) (*RouteScheduleList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScheduleForRoute not implemented")
}
func (UnimplementedRouteServiceServer) mustEmbedUnimplementedRouteServiceServer() {}

// UnsafeRouteServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RouteServiceServer will
// result in compilation errors.
type UnsafeRouteServiceServer interface {
	mustEmbedUnimplementedRouteServiceServer()
}

func RegisterRouteServiceServer(s grpc.ServiceRegistrar, srv RouteServiceServer) {
	s.RegisterService(&RouteService_ServiceDesc, srv)
}

func _RouteService_CreateTransportRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RouteCreate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteServiceServer).CreateTransportRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RouteService_CreateTransportRoute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteServiceServer).CreateTransportRoute(ctx, req.(*RouteCreate))
	}
	return interceptor(ctx, in, info, handler)
}

func _RouteService_GetAllTrasnportRoutes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RouteFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteServiceServer).GetAllTrasnportRoutes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RouteService_GetAllTrasnportRoutes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteServiceServer).GetAllTrasnportRoutes(ctx, req.(*RouteFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _RouteService_CreateSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RouteScheduleCreate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteServiceServer).CreateSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RouteService_CreateSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteServiceServer).CreateSchedule(ctx, req.(*RouteScheduleCreate))
	}
	return interceptor(ctx, in, info, handler)
}

func _RouteService_GetScheduleForRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteServiceServer).GetScheduleForRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RouteService_GetScheduleForRoute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteServiceServer).GetScheduleForRoute(ctx, req.(*ById))
	}
	return interceptor(ctx, in, info, handler)
}

// RouteService_ServiceDesc is the grpc.ServiceDesc for RouteService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RouteService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "transport.RouteService",
	HandlerType: (*RouteServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTransportRoute",
			Handler:    _RouteService_CreateTransportRoute_Handler,
		},
		{
			MethodName: "GetAllTrasnportRoutes",
			Handler:    _RouteService_GetAllTrasnportRoutes_Handler,
		},
		{
			MethodName: "CreateSchedule",
			Handler:    _RouteService_CreateSchedule_Handler,
		},
		{
			MethodName: "GetScheduleForRoute",
			Handler:    _RouteService_GetScheduleForRoute_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "route.proto",
}
