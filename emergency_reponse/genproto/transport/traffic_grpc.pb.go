// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: traffic.proto

package transport

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TrafficService_SetUpTrafficCondition_FullMethodName  = "/transport.TrafficService/SetUpTrafficCondition"
	TrafficService_GetTrafficCondition_FullMethodName    = "/transport.TrafficService/GetTrafficCondition"
	TrafficService_UpdateTrafficCondition_FullMethodName = "/transport.TrafficService/UpdateTrafficCondition"
)

// TrafficServiceClient is the client API for TrafficService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TrafficServiceClient interface {
	SetUpTrafficCondition(ctx context.Context, in *TarfficConditionCreate, opts ...grpc.CallOption) (*TarfficCondition, error)
	GetTrafficCondition(ctx context.Context, in *ById, opts ...grpc.CallOption) (*TarfficCondition, error)
	UpdateTrafficCondition(ctx context.Context, in *TarfficConditionCreate, opts ...grpc.CallOption) (*TarfficCondition, error)
}

type trafficServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTrafficServiceClient(cc grpc.ClientConnInterface) TrafficServiceClient {
	return &trafficServiceClient{cc}
}

func (c *trafficServiceClient) SetUpTrafficCondition(ctx context.Context, in *TarfficConditionCreate, opts ...grpc.CallOption) (*TarfficCondition, error) {
	out := new(TarfficCondition)
	err := c.cc.Invoke(ctx, TrafficService_SetUpTrafficCondition_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trafficServiceClient) GetTrafficCondition(ctx context.Context, in *ById, opts ...grpc.CallOption) (*TarfficCondition, error) {
	out := new(TarfficCondition)
	err := c.cc.Invoke(ctx, TrafficService_GetTrafficCondition_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trafficServiceClient) UpdateTrafficCondition(ctx context.Context, in *TarfficConditionCreate, opts ...grpc.CallOption) (*TarfficCondition, error) {
	out := new(TarfficCondition)
	err := c.cc.Invoke(ctx, TrafficService_UpdateTrafficCondition_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TrafficServiceServer is the server API for TrafficService service.
// All implementations must embed UnimplementedTrafficServiceServer
// for forward compatibility
type TrafficServiceServer interface {
	SetUpTrafficCondition(context.Context, *TarfficConditionCreate) (*TarfficCondition, error)
	GetTrafficCondition(context.Context, *ById) (*TarfficCondition, error)
	UpdateTrafficCondition(context.Context, *TarfficConditionCreate) (*TarfficCondition, error)
	mustEmbedUnimplementedTrafficServiceServer()
}

// UnimplementedTrafficServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTrafficServiceServer struct {
}

func (UnimplementedTrafficServiceServer) SetUpTrafficCondition(context.Context, *TarfficConditionCreate) (*TarfficCondition, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUpTrafficCondition not implemented")
}
func (UnimplementedTrafficServiceServer) GetTrafficCondition(context.Context, *ById) (*TarfficCondition, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTrafficCondition not implemented")
}
func (UnimplementedTrafficServiceServer) UpdateTrafficCondition(context.Context, *TarfficConditionCreate) (*TarfficCondition, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTrafficCondition not implemented")
}
func (UnimplementedTrafficServiceServer) mustEmbedUnimplementedTrafficServiceServer() {}

// UnsafeTrafficServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TrafficServiceServer will
// result in compilation errors.
type UnsafeTrafficServiceServer interface {
	mustEmbedUnimplementedTrafficServiceServer()
}

func RegisterTrafficServiceServer(s grpc.ServiceRegistrar, srv TrafficServiceServer) {
	s.RegisterService(&TrafficService_ServiceDesc, srv)
}

func _TrafficService_SetUpTrafficCondition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TarfficConditionCreate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrafficServiceServer).SetUpTrafficCondition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrafficService_SetUpTrafficCondition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrafficServiceServer).SetUpTrafficCondition(ctx, req.(*TarfficConditionCreate))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrafficService_GetTrafficCondition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrafficServiceServer).GetTrafficCondition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrafficService_GetTrafficCondition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrafficServiceServer).GetTrafficCondition(ctx, req.(*ById))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrafficService_UpdateTrafficCondition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TarfficConditionCreate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrafficServiceServer).UpdateTrafficCondition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrafficService_UpdateTrafficCondition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrafficServiceServer).UpdateTrafficCondition(ctx, req.(*TarfficConditionCreate))
	}
	return interceptor(ctx, in, info, handler)
}

// TrafficService_ServiceDesc is the grpc.ServiceDesc for TrafficService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TrafficService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "transport.TrafficService",
	HandlerType: (*TrafficServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetUpTrafficCondition",
			Handler:    _TrafficService_SetUpTrafficCondition_Handler,
		},
		{
			MethodName: "GetTrafficCondition",
			Handler:    _TrafficService_GetTrafficCondition_Handler,
		},
		{
			MethodName: "UpdateTrafficCondition",
			Handler:    _TrafficService_UpdateTrafficCondition_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "traffic.proto",
}
