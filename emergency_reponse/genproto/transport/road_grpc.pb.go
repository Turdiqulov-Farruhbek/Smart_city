// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: road.proto

package transport

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RoadService_CreateRoad_FullMethodName = "/transport.RoadService/CreateRoad"
	RoadService_UpdateRoad_FullMethodName = "/transport.RoadService/UpdateRoad"
	RoadService_DeleteRoad_FullMethodName = "/transport.RoadService/DeleteRoad"
	RoadService_GetRoad_FullMethodName    = "/transport.RoadService/GetRoad"
)

// RoadServiceClient is the client API for RoadService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RoadServiceClient interface {
	CreateRoad(ctx context.Context, in *RoadCreate, opts ...grpc.CallOption) (*Road, error)
	UpdateRoad(ctx context.Context, in *RoadCreate, opts ...grpc.CallOption) (*Road, error)
	DeleteRoad(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Road, error)
	GetRoad(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Road, error)
}

type roadServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRoadServiceClient(cc grpc.ClientConnInterface) RoadServiceClient {
	return &roadServiceClient{cc}
}

func (c *roadServiceClient) CreateRoad(ctx context.Context, in *RoadCreate, opts ...grpc.CallOption) (*Road, error) {
	out := new(Road)
	err := c.cc.Invoke(ctx, RoadService_CreateRoad_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roadServiceClient) UpdateRoad(ctx context.Context, in *RoadCreate, opts ...grpc.CallOption) (*Road, error) {
	out := new(Road)
	err := c.cc.Invoke(ctx, RoadService_UpdateRoad_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roadServiceClient) DeleteRoad(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Road, error) {
	out := new(Road)
	err := c.cc.Invoke(ctx, RoadService_DeleteRoad_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roadServiceClient) GetRoad(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Road, error) {
	out := new(Road)
	err := c.cc.Invoke(ctx, RoadService_GetRoad_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoadServiceServer is the server API for RoadService service.
// All implementations must embed UnimplementedRoadServiceServer
// for forward compatibility
type RoadServiceServer interface {
	CreateRoad(context.Context, *RoadCreate) (*Road, error)
	UpdateRoad(context.Context, *RoadCreate) (*Road, error)
	DeleteRoad(context.Context, *ById) (*Road, error)
	GetRoad(context.Context, *ById) (*Road, error)
	mustEmbedUnimplementedRoadServiceServer()
}

// UnimplementedRoadServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRoadServiceServer struct {
}

func (UnimplementedRoadServiceServer) CreateRoad(context.Context, *RoadCreate) (*Road, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRoad not implemented")
}
func (UnimplementedRoadServiceServer) UpdateRoad(context.Context, *RoadCreate) (*Road, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRoad not implemented")
}
func (UnimplementedRoadServiceServer) DeleteRoad(context.Context, *ById) (*Road, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRoad not implemented")
}
func (UnimplementedRoadServiceServer) GetRoad(context.Context, *ById) (*Road, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoad not implemented")
}
func (UnimplementedRoadServiceServer) mustEmbedUnimplementedRoadServiceServer() {}

// UnsafeRoadServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RoadServiceServer will
// result in compilation errors.
type UnsafeRoadServiceServer interface {
	mustEmbedUnimplementedRoadServiceServer()
}

func RegisterRoadServiceServer(s grpc.ServiceRegistrar, srv RoadServiceServer) {
	s.RegisterService(&RoadService_ServiceDesc, srv)
}

func _RoadService_CreateRoad_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoadCreate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoadServiceServer).CreateRoad(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoadService_CreateRoad_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoadServiceServer).CreateRoad(ctx, req.(*RoadCreate))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoadService_UpdateRoad_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoadCreate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoadServiceServer).UpdateRoad(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoadService_UpdateRoad_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoadServiceServer).UpdateRoad(ctx, req.(*RoadCreate))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoadService_DeleteRoad_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoadServiceServer).DeleteRoad(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoadService_DeleteRoad_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoadServiceServer).DeleteRoad(ctx, req.(*ById))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoadService_GetRoad_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoadServiceServer).GetRoad(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoadService_GetRoad_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoadServiceServer).GetRoad(ctx, req.(*ById))
	}
	return interceptor(ctx, in, info, handler)
}

// RoadService_ServiceDesc is the grpc.ServiceDesc for RoadService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RoadService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "transport.RoadService",
	HandlerType: (*RoadServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRoad",
			Handler:    _RoadService_CreateRoad_Handler,
		},
		{
			MethodName: "UpdateRoad",
			Handler:    _RoadService_UpdateRoad_Handler,
		},
		{
			MethodName: "DeleteRoad",
			Handler:    _RoadService_DeleteRoad_Handler,
		},
		{
			MethodName: "GetRoad",
			Handler:    _RoadService_GetRoad_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "road.proto",
}
