// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: infrastructure_assets.proto

package city_planning

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	InfrastuctureAssetService_CreateInfrastructureAsset_FullMethodName = "/city_planning.InfrastuctureAssetService/CreateInfrastructureAsset"
	InfrastuctureAssetService_UpdateInfrastructureAsset_FullMethodName = "/city_planning.InfrastuctureAssetService/UpdateInfrastructureAsset"
	InfrastuctureAssetService_DeleteInfrastructureAsset_FullMethodName = "/city_planning.InfrastuctureAssetService/DeleteInfrastructureAsset"
	InfrastuctureAssetService_GetInfrastructureAssets_FullMethodName   = "/city_planning.InfrastuctureAssetService/GetInfrastructureAssets"
)

// InfrastuctureAssetServiceClient is the client API for InfrastuctureAssetService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InfrastuctureAssetServiceClient interface {
	CreateInfrastructureAsset(ctx context.Context, in *InfrastuctureAssetCreate, opts ...grpc.CallOption) (*Void, error)
	UpdateInfrastructureAsset(ctx context.Context, in *InfrastuctureAssetCreate, opts ...grpc.CallOption) (*Void, error)
	DeleteInfrastructureAsset(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Void, error)
	GetInfrastructureAssets(ctx context.Context, in *InfrastuctureAssetFilter, opts ...grpc.CallOption) (*InfrastuctureAssetList, error)
}

type infrastuctureAssetServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInfrastuctureAssetServiceClient(cc grpc.ClientConnInterface) InfrastuctureAssetServiceClient {
	return &infrastuctureAssetServiceClient{cc}
}

func (c *infrastuctureAssetServiceClient) CreateInfrastructureAsset(ctx context.Context, in *InfrastuctureAssetCreate, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, InfrastuctureAssetService_CreateInfrastructureAsset_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infrastuctureAssetServiceClient) UpdateInfrastructureAsset(ctx context.Context, in *InfrastuctureAssetCreate, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, InfrastuctureAssetService_UpdateInfrastructureAsset_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infrastuctureAssetServiceClient) DeleteInfrastructureAsset(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, InfrastuctureAssetService_DeleteInfrastructureAsset_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infrastuctureAssetServiceClient) GetInfrastructureAssets(ctx context.Context, in *InfrastuctureAssetFilter, opts ...grpc.CallOption) (*InfrastuctureAssetList, error) {
	out := new(InfrastuctureAssetList)
	err := c.cc.Invoke(ctx, InfrastuctureAssetService_GetInfrastructureAssets_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InfrastuctureAssetServiceServer is the server API for InfrastuctureAssetService service.
// All implementations must embed UnimplementedInfrastuctureAssetServiceServer
// for forward compatibility
type InfrastuctureAssetServiceServer interface {
	CreateInfrastructureAsset(context.Context, *InfrastuctureAssetCreate) (*Void, error)
	UpdateInfrastructureAsset(context.Context, *InfrastuctureAssetCreate) (*Void, error)
	DeleteInfrastructureAsset(context.Context, *ById) (*Void, error)
	GetInfrastructureAssets(context.Context, *InfrastuctureAssetFilter) (*InfrastuctureAssetList, error)
	mustEmbedUnimplementedInfrastuctureAssetServiceServer()
}

// UnimplementedInfrastuctureAssetServiceServer must be embedded to have forward compatible implementations.
type UnimplementedInfrastuctureAssetServiceServer struct {
}

func (UnimplementedInfrastuctureAssetServiceServer) CreateInfrastructureAsset(context.Context, *InfrastuctureAssetCreate) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInfrastructureAsset not implemented")
}
func (UnimplementedInfrastuctureAssetServiceServer) UpdateInfrastructureAsset(context.Context, *InfrastuctureAssetCreate) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateInfrastructureAsset not implemented")
}
func (UnimplementedInfrastuctureAssetServiceServer) DeleteInfrastructureAsset(context.Context, *ById) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteInfrastructureAsset not implemented")
}
func (UnimplementedInfrastuctureAssetServiceServer) GetInfrastructureAssets(context.Context, *InfrastuctureAssetFilter) (*InfrastuctureAssetList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInfrastructureAssets not implemented")
}
func (UnimplementedInfrastuctureAssetServiceServer) mustEmbedUnimplementedInfrastuctureAssetServiceServer() {
}

// UnsafeInfrastuctureAssetServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InfrastuctureAssetServiceServer will
// result in compilation errors.
type UnsafeInfrastuctureAssetServiceServer interface {
	mustEmbedUnimplementedInfrastuctureAssetServiceServer()
}

func RegisterInfrastuctureAssetServiceServer(s grpc.ServiceRegistrar, srv InfrastuctureAssetServiceServer) {
	s.RegisterService(&InfrastuctureAssetService_ServiceDesc, srv)
}

func _InfrastuctureAssetService_CreateInfrastructureAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfrastuctureAssetCreate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfrastuctureAssetServiceServer).CreateInfrastructureAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InfrastuctureAssetService_CreateInfrastructureAsset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfrastuctureAssetServiceServer).CreateInfrastructureAsset(ctx, req.(*InfrastuctureAssetCreate))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfrastuctureAssetService_UpdateInfrastructureAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfrastuctureAssetCreate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfrastuctureAssetServiceServer).UpdateInfrastructureAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InfrastuctureAssetService_UpdateInfrastructureAsset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfrastuctureAssetServiceServer).UpdateInfrastructureAsset(ctx, req.(*InfrastuctureAssetCreate))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfrastuctureAssetService_DeleteInfrastructureAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfrastuctureAssetServiceServer).DeleteInfrastructureAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InfrastuctureAssetService_DeleteInfrastructureAsset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfrastuctureAssetServiceServer).DeleteInfrastructureAsset(ctx, req.(*ById))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfrastuctureAssetService_GetInfrastructureAssets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfrastuctureAssetFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfrastuctureAssetServiceServer).GetInfrastructureAssets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InfrastuctureAssetService_GetInfrastructureAssets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfrastuctureAssetServiceServer).GetInfrastructureAssets(ctx, req.(*InfrastuctureAssetFilter))
	}
	return interceptor(ctx, in, info, handler)
}

// InfrastuctureAssetService_ServiceDesc is the grpc.ServiceDesc for InfrastuctureAssetService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InfrastuctureAssetService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "city_planning.InfrastuctureAssetService",
	HandlerType: (*InfrastuctureAssetServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateInfrastructureAsset",
			Handler:    _InfrastuctureAssetService_CreateInfrastructureAsset_Handler,
		},
		{
			MethodName: "UpdateInfrastructureAsset",
			Handler:    _InfrastuctureAssetService_UpdateInfrastructureAsset_Handler,
		},
		{
			MethodName: "DeleteInfrastructureAsset",
			Handler:    _InfrastuctureAssetService_DeleteInfrastructureAsset_Handler,
		},
		{
			MethodName: "GetInfrastructureAssets",
			Handler:    _InfrastuctureAssetService_GetInfrastructureAssets_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "infrastructure_assets.proto",
}
