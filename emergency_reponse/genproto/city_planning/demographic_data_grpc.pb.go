// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: demographic_data.proto

package city_planning

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DemographicDataService_CreateDemographicData_FullMethodName = "/city_planning.DemographicDataService/CreateDemographicData"
	DemographicDataService_UpdateDemographicData_FullMethodName = "/city_planning.DemographicDataService/UpdateDemographicData"
	DemographicDataService_DeleteDemographicData_FullMethodName = "/city_planning.DemographicDataService/DeleteDemographicData"
	DemographicDataService_GetDemographicDatas_FullMethodName   = "/city_planning.DemographicDataService/GetDemographicDatas"
)

// DemographicDataServiceClient is the client API for DemographicDataService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DemographicDataServiceClient interface {
	CreateDemographicData(ctx context.Context, in *DemographicDataCreate, opts ...grpc.CallOption) (*Void, error)
	UpdateDemographicData(ctx context.Context, in *DemographicDataCreate, opts ...grpc.CallOption) (*Void, error)
	DeleteDemographicData(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Void, error)
	GetDemographicDatas(ctx context.Context, in *DemographicDataFilter, opts ...grpc.CallOption) (*DemographicDataList, error)
}

type demographicDataServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDemographicDataServiceClient(cc grpc.ClientConnInterface) DemographicDataServiceClient {
	return &demographicDataServiceClient{cc}
}

func (c *demographicDataServiceClient) CreateDemographicData(ctx context.Context, in *DemographicDataCreate, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, DemographicDataService_CreateDemographicData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *demographicDataServiceClient) UpdateDemographicData(ctx context.Context, in *DemographicDataCreate, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, DemographicDataService_UpdateDemographicData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *demographicDataServiceClient) DeleteDemographicData(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, DemographicDataService_DeleteDemographicData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *demographicDataServiceClient) GetDemographicDatas(ctx context.Context, in *DemographicDataFilter, opts ...grpc.CallOption) (*DemographicDataList, error) {
	out := new(DemographicDataList)
	err := c.cc.Invoke(ctx, DemographicDataService_GetDemographicDatas_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DemographicDataServiceServer is the server API for DemographicDataService service.
// All implementations must embed UnimplementedDemographicDataServiceServer
// for forward compatibility
type DemographicDataServiceServer interface {
	CreateDemographicData(context.Context, *DemographicDataCreate) (*Void, error)
	UpdateDemographicData(context.Context, *DemographicDataCreate) (*Void, error)
	DeleteDemographicData(context.Context, *ById) (*Void, error)
	GetDemographicDatas(context.Context, *DemographicDataFilter) (*DemographicDataList, error)
	mustEmbedUnimplementedDemographicDataServiceServer()
}

// UnimplementedDemographicDataServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDemographicDataServiceServer struct {
}

func (UnimplementedDemographicDataServiceServer) CreateDemographicData(context.Context, *DemographicDataCreate) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDemographicData not implemented")
}
func (UnimplementedDemographicDataServiceServer) UpdateDemographicData(context.Context, *DemographicDataCreate) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDemographicData not implemented")
}
func (UnimplementedDemographicDataServiceServer) DeleteDemographicData(context.Context, *ById) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDemographicData not implemented")
}
func (UnimplementedDemographicDataServiceServer) GetDemographicDatas(context.Context, *DemographicDataFilter) (*DemographicDataList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDemographicDatas not implemented")
}
func (UnimplementedDemographicDataServiceServer) mustEmbedUnimplementedDemographicDataServiceServer() {
}

// UnsafeDemographicDataServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DemographicDataServiceServer will
// result in compilation errors.
type UnsafeDemographicDataServiceServer interface {
	mustEmbedUnimplementedDemographicDataServiceServer()
}

func RegisterDemographicDataServiceServer(s grpc.ServiceRegistrar, srv DemographicDataServiceServer) {
	s.RegisterService(&DemographicDataService_ServiceDesc, srv)
}

func _DemographicDataService_CreateDemographicData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DemographicDataCreate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DemographicDataServiceServer).CreateDemographicData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DemographicDataService_CreateDemographicData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DemographicDataServiceServer).CreateDemographicData(ctx, req.(*DemographicDataCreate))
	}
	return interceptor(ctx, in, info, handler)
}

func _DemographicDataService_UpdateDemographicData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DemographicDataCreate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DemographicDataServiceServer).UpdateDemographicData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DemographicDataService_UpdateDemographicData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DemographicDataServiceServer).UpdateDemographicData(ctx, req.(*DemographicDataCreate))
	}
	return interceptor(ctx, in, info, handler)
}

func _DemographicDataService_DeleteDemographicData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DemographicDataServiceServer).DeleteDemographicData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DemographicDataService_DeleteDemographicData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DemographicDataServiceServer).DeleteDemographicData(ctx, req.(*ById))
	}
	return interceptor(ctx, in, info, handler)
}

func _DemographicDataService_GetDemographicDatas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DemographicDataFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DemographicDataServiceServer).GetDemographicDatas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DemographicDataService_GetDemographicDatas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DemographicDataServiceServer).GetDemographicDatas(ctx, req.(*DemographicDataFilter))
	}
	return interceptor(ctx, in, info, handler)
}

// DemographicDataService_ServiceDesc is the grpc.ServiceDesc for DemographicDataService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DemographicDataService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "city_planning.DemographicDataService",
	HandlerType: (*DemographicDataServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDemographicData",
			Handler:    _DemographicDataService_CreateDemographicData_Handler,
		},
		{
			MethodName: "UpdateDemographicData",
			Handler:    _DemographicDataService_UpdateDemographicData_Handler,
		},
		{
			MethodName: "DeleteDemographicData",
			Handler:    _DemographicDataService_DeleteDemographicData_Handler,
		},
		{
			MethodName: "GetDemographicDatas",
			Handler:    _DemographicDataService_GetDemographicDatas_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "demographic_data.proto",
}
