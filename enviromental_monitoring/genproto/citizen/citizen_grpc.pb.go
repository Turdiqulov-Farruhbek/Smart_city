// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.12.4
// source: citizen.proto

package citizen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	CitizenService_RegisterCitizen_FullMethodName      = "/citizen.CitizenService/RegisterCitizen"
	CitizenService_GetCitizenProfile_FullMethodName    = "/citizen.CitizenService/GetCitizenProfile"
	CitizenService_UpdateCitizenProfile_FullMethodName = "/citizen.CitizenService/UpdateCitizenProfile"
	CitizenService_DeleteCitizenProfile_FullMethodName = "/citizen.CitizenService/DeleteCitizenProfile"
)

// CitizenServiceClient is the client API for CitizenService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CitizenServiceClient interface {
	RegisterCitizen(ctx context.Context, in *CitizenCreate, opts ...grpc.CallOption) (*Citizen, error)
	GetCitizenProfile(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Citizen, error)
	UpdateCitizenProfile(ctx context.Context, in *CitizenCreate, opts ...grpc.CallOption) (*Citizen, error)
	DeleteCitizenProfile(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Void, error)
}

type citizenServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCitizenServiceClient(cc grpc.ClientConnInterface) CitizenServiceClient {
	return &citizenServiceClient{cc}
}

func (c *citizenServiceClient) RegisterCitizen(ctx context.Context, in *CitizenCreate, opts ...grpc.CallOption) (*Citizen, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Citizen)
	err := c.cc.Invoke(ctx, CitizenService_RegisterCitizen_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *citizenServiceClient) GetCitizenProfile(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Citizen, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Citizen)
	err := c.cc.Invoke(ctx, CitizenService_GetCitizenProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *citizenServiceClient) UpdateCitizenProfile(ctx context.Context, in *CitizenCreate, opts ...grpc.CallOption) (*Citizen, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Citizen)
	err := c.cc.Invoke(ctx, CitizenService_UpdateCitizenProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *citizenServiceClient) DeleteCitizenProfile(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Void, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Void)
	err := c.cc.Invoke(ctx, CitizenService_DeleteCitizenProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CitizenServiceServer is the server API for CitizenService service.
// All implementations must embed UnimplementedCitizenServiceServer
// for forward compatibility
type CitizenServiceServer interface {
	RegisterCitizen(context.Context, *CitizenCreate) (*Citizen, error)
	GetCitizenProfile(context.Context, *ById) (*Citizen, error)
	UpdateCitizenProfile(context.Context, *CitizenCreate) (*Citizen, error)
	DeleteCitizenProfile(context.Context, *ById) (*Void, error)
	mustEmbedUnimplementedCitizenServiceServer()
}

// UnimplementedCitizenServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCitizenServiceServer struct {
}

func (UnimplementedCitizenServiceServer) RegisterCitizen(context.Context, *CitizenCreate) (*Citizen, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterCitizen not implemented")
}
func (UnimplementedCitizenServiceServer) GetCitizenProfile(context.Context, *ById) (*Citizen, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCitizenProfile not implemented")
}
func (UnimplementedCitizenServiceServer) UpdateCitizenProfile(context.Context, *CitizenCreate) (*Citizen, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCitizenProfile not implemented")
}
func (UnimplementedCitizenServiceServer) DeleteCitizenProfile(context.Context, *ById) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCitizenProfile not implemented")
}
func (UnimplementedCitizenServiceServer) mustEmbedUnimplementedCitizenServiceServer() {}

// UnsafeCitizenServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CitizenServiceServer will
// result in compilation errors.
type UnsafeCitizenServiceServer interface {
	mustEmbedUnimplementedCitizenServiceServer()
}

func RegisterCitizenServiceServer(s grpc.ServiceRegistrar, srv CitizenServiceServer) {
	s.RegisterService(&CitizenService_ServiceDesc, srv)
}

func _CitizenService_RegisterCitizen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CitizenCreate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CitizenServiceServer).RegisterCitizen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CitizenService_RegisterCitizen_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CitizenServiceServer).RegisterCitizen(ctx, req.(*CitizenCreate))
	}
	return interceptor(ctx, in, info, handler)
}

func _CitizenService_GetCitizenProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CitizenServiceServer).GetCitizenProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CitizenService_GetCitizenProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CitizenServiceServer).GetCitizenProfile(ctx, req.(*ById))
	}
	return interceptor(ctx, in, info, handler)
}

func _CitizenService_UpdateCitizenProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CitizenCreate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CitizenServiceServer).UpdateCitizenProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CitizenService_UpdateCitizenProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CitizenServiceServer).UpdateCitizenProfile(ctx, req.(*CitizenCreate))
	}
	return interceptor(ctx, in, info, handler)
}

func _CitizenService_DeleteCitizenProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CitizenServiceServer).DeleteCitizenProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CitizenService_DeleteCitizenProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CitizenServiceServer).DeleteCitizenProfile(ctx, req.(*ById))
	}
	return interceptor(ctx, in, info, handler)
}

// CitizenService_ServiceDesc is the grpc.ServiceDesc for CitizenService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CitizenService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "citizen.CitizenService",
	HandlerType: (*CitizenServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterCitizen",
			Handler:    _CitizenService_RegisterCitizen_Handler,
		},
		{
			MethodName: "GetCitizenProfile",
			Handler:    _CitizenService_GetCitizenProfile_Handler,
		},
		{
			MethodName: "UpdateCitizenProfile",
			Handler:    _CitizenService_UpdateCitizenProfile_Handler,
		},
		{
			MethodName: "DeleteCitizenProfile",
			Handler:    _CitizenService_DeleteCitizenProfile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "citizen.proto",
}
