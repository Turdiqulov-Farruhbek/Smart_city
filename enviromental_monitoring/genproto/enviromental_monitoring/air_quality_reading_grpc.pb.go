// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.12.4
// source: air_quality_reading.proto

package enviromental_monitoring

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	AirQualityReadingService_CreateAirQualityReading_FullMethodName = "/enviromental_monitoring.AirQualityReadingService/CreateAirQualityReading"
	AirQualityReadingService_GetCityWideAirQuality_FullMethodName   = "/enviromental_monitoring.AirQualityReadingService/GetCityWideAirQuality"
	AirQualityReadingService_GetCurrentAirQuality_FullMethodName    = "/enviromental_monitoring.AirQualityReadingService/GetCurrentAirQuality"
)

// AirQualityReadingServiceClient is the client API for AirQualityReadingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AirQualityReadingServiceClient interface {
	CreateAirQualityReading(ctx context.Context, in *AirQualityReadingCreate, opts ...grpc.CallOption) (*Void, error)
	GetCityWideAirQuality(ctx context.Context, in *AirQualityFilter, opts ...grpc.CallOption) (*AirQualityList, error)
	GetCurrentAirQuality(ctx context.Context, in *ById, opts ...grpc.CallOption) (*AirQualityReading, error)
}

type airQualityReadingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAirQualityReadingServiceClient(cc grpc.ClientConnInterface) AirQualityReadingServiceClient {
	return &airQualityReadingServiceClient{cc}
}

func (c *airQualityReadingServiceClient) CreateAirQualityReading(ctx context.Context, in *AirQualityReadingCreate, opts ...grpc.CallOption) (*Void, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Void)
	err := c.cc.Invoke(ctx, AirQualityReadingService_CreateAirQualityReading_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *airQualityReadingServiceClient) GetCityWideAirQuality(ctx context.Context, in *AirQualityFilter, opts ...grpc.CallOption) (*AirQualityList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AirQualityList)
	err := c.cc.Invoke(ctx, AirQualityReadingService_GetCityWideAirQuality_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *airQualityReadingServiceClient) GetCurrentAirQuality(ctx context.Context, in *ById, opts ...grpc.CallOption) (*AirQualityReading, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AirQualityReading)
	err := c.cc.Invoke(ctx, AirQualityReadingService_GetCurrentAirQuality_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AirQualityReadingServiceServer is the server API for AirQualityReadingService service.
// All implementations must embed UnimplementedAirQualityReadingServiceServer
// for forward compatibility
type AirQualityReadingServiceServer interface {
	CreateAirQualityReading(context.Context, *AirQualityReadingCreate) (*Void, error)
	GetCityWideAirQuality(context.Context, *AirQualityFilter) (*AirQualityList, error)
	GetCurrentAirQuality(context.Context, *ById) (*AirQualityReading, error)
	mustEmbedUnimplementedAirQualityReadingServiceServer()
}

// UnimplementedAirQualityReadingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAirQualityReadingServiceServer struct {
}

func (UnimplementedAirQualityReadingServiceServer) CreateAirQualityReading(context.Context, *AirQualityReadingCreate) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAirQualityReading not implemented")
}
func (UnimplementedAirQualityReadingServiceServer) GetCityWideAirQuality(context.Context, *AirQualityFilter) (*AirQualityList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCityWideAirQuality not implemented")
}
func (UnimplementedAirQualityReadingServiceServer) GetCurrentAirQuality(context.Context, *ById) (*AirQualityReading, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentAirQuality not implemented")
}
func (UnimplementedAirQualityReadingServiceServer) mustEmbedUnimplementedAirQualityReadingServiceServer() {
}

// UnsafeAirQualityReadingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AirQualityReadingServiceServer will
// result in compilation errors.
type UnsafeAirQualityReadingServiceServer interface {
	mustEmbedUnimplementedAirQualityReadingServiceServer()
}

func RegisterAirQualityReadingServiceServer(s grpc.ServiceRegistrar, srv AirQualityReadingServiceServer) {
	s.RegisterService(&AirQualityReadingService_ServiceDesc, srv)
}

func _AirQualityReadingService_CreateAirQualityReading_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AirQualityReadingCreate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AirQualityReadingServiceServer).CreateAirQualityReading(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AirQualityReadingService_CreateAirQualityReading_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AirQualityReadingServiceServer).CreateAirQualityReading(ctx, req.(*AirQualityReadingCreate))
	}
	return interceptor(ctx, in, info, handler)
}

func _AirQualityReadingService_GetCityWideAirQuality_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AirQualityFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AirQualityReadingServiceServer).GetCityWideAirQuality(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AirQualityReadingService_GetCityWideAirQuality_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AirQualityReadingServiceServer).GetCityWideAirQuality(ctx, req.(*AirQualityFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _AirQualityReadingService_GetCurrentAirQuality_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AirQualityReadingServiceServer).GetCurrentAirQuality(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AirQualityReadingService_GetCurrentAirQuality_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AirQualityReadingServiceServer).GetCurrentAirQuality(ctx, req.(*ById))
	}
	return interceptor(ctx, in, info, handler)
}

// AirQualityReadingService_ServiceDesc is the grpc.ServiceDesc for AirQualityReadingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AirQualityReadingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "enviromental_monitoring.AirQualityReadingService",
	HandlerType: (*AirQualityReadingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAirQualityReading",
			Handler:    _AirQualityReadingService_CreateAirQualityReading_Handler,
		},
		{
			MethodName: "GetCityWideAirQuality",
			Handler:    _AirQualityReadingService_GetCityWideAirQuality_Handler,
		},
		{
			MethodName: "GetCurrentAirQuality",
			Handler:    _AirQualityReadingService_GetCurrentAirQuality_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "air_quality_reading.proto",
}
