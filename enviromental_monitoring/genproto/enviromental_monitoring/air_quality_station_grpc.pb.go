// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.12.4
// source: air_quality_station.proto

package enviromental_monitoring

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	AirQualityStationService_CreateStation_FullMethodName = "/enviromental_monitoring.AirQualityStationService/CreateStation"
	AirQualityStationService_UpdateStation_FullMethodName = "/enviromental_monitoring.AirQualityStationService/UpdateStation"
	AirQualityStationService_DeleteStation_FullMethodName = "/enviromental_monitoring.AirQualityStationService/DeleteStation"
	AirQualityStationService_GetStation_FullMethodName    = "/enviromental_monitoring.AirQualityStationService/GetStation"
)

// AirQualityStationServiceClient is the client API for AirQualityStationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AirQualityStationServiceClient interface {
	CreateStation(ctx context.Context, in *Station, opts ...grpc.CallOption) (*Void, error)
	UpdateStation(ctx context.Context, in *Station, opts ...grpc.CallOption) (*Void, error)
	DeleteStation(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Void, error)
	GetStation(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Station, error)
}

type airQualityStationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAirQualityStationServiceClient(cc grpc.ClientConnInterface) AirQualityStationServiceClient {
	return &airQualityStationServiceClient{cc}
}

func (c *airQualityStationServiceClient) CreateStation(ctx context.Context, in *Station, opts ...grpc.CallOption) (*Void, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Void)
	err := c.cc.Invoke(ctx, AirQualityStationService_CreateStation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *airQualityStationServiceClient) UpdateStation(ctx context.Context, in *Station, opts ...grpc.CallOption) (*Void, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Void)
	err := c.cc.Invoke(ctx, AirQualityStationService_UpdateStation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *airQualityStationServiceClient) DeleteStation(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Void, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Void)
	err := c.cc.Invoke(ctx, AirQualityStationService_DeleteStation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *airQualityStationServiceClient) GetStation(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Station, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Station)
	err := c.cc.Invoke(ctx, AirQualityStationService_GetStation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AirQualityStationServiceServer is the server API for AirQualityStationService service.
// All implementations must embed UnimplementedAirQualityStationServiceServer
// for forward compatibility
type AirQualityStationServiceServer interface {
	CreateStation(context.Context, *Station) (*Void, error)
	UpdateStation(context.Context, *Station) (*Void, error)
	DeleteStation(context.Context, *ById) (*Void, error)
	GetStation(context.Context, *ById) (*Station, error)
	mustEmbedUnimplementedAirQualityStationServiceServer()
}

// UnimplementedAirQualityStationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAirQualityStationServiceServer struct {
}

func (UnimplementedAirQualityStationServiceServer) CreateStation(context.Context, *Station) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStation not implemented")
}
func (UnimplementedAirQualityStationServiceServer) UpdateStation(context.Context, *Station) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStation not implemented")
}
func (UnimplementedAirQualityStationServiceServer) DeleteStation(context.Context, *ById) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStation not implemented")
}
func (UnimplementedAirQualityStationServiceServer) GetStation(context.Context, *ById) (*Station, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStation not implemented")
}
func (UnimplementedAirQualityStationServiceServer) mustEmbedUnimplementedAirQualityStationServiceServer() {
}

// UnsafeAirQualityStationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AirQualityStationServiceServer will
// result in compilation errors.
type UnsafeAirQualityStationServiceServer interface {
	mustEmbedUnimplementedAirQualityStationServiceServer()
}

func RegisterAirQualityStationServiceServer(s grpc.ServiceRegistrar, srv AirQualityStationServiceServer) {
	s.RegisterService(&AirQualityStationService_ServiceDesc, srv)
}

func _AirQualityStationService_CreateStation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Station)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AirQualityStationServiceServer).CreateStation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AirQualityStationService_CreateStation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AirQualityStationServiceServer).CreateStation(ctx, req.(*Station))
	}
	return interceptor(ctx, in, info, handler)
}

func _AirQualityStationService_UpdateStation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Station)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AirQualityStationServiceServer).UpdateStation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AirQualityStationService_UpdateStation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AirQualityStationServiceServer).UpdateStation(ctx, req.(*Station))
	}
	return interceptor(ctx, in, info, handler)
}

func _AirQualityStationService_DeleteStation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AirQualityStationServiceServer).DeleteStation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AirQualityStationService_DeleteStation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AirQualityStationServiceServer).DeleteStation(ctx, req.(*ById))
	}
	return interceptor(ctx, in, info, handler)
}

func _AirQualityStationService_GetStation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AirQualityStationServiceServer).GetStation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AirQualityStationService_GetStation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AirQualityStationServiceServer).GetStation(ctx, req.(*ById))
	}
	return interceptor(ctx, in, info, handler)
}

// AirQualityStationService_ServiceDesc is the grpc.ServiceDesc for AirQualityStationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AirQualityStationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "enviromental_monitoring.AirQualityStationService",
	HandlerType: (*AirQualityStationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateStation",
			Handler:    _AirQualityStationService_CreateStation_Handler,
		},
		{
			MethodName: "UpdateStation",
			Handler:    _AirQualityStationService_UpdateStation_Handler,
		},
		{
			MethodName: "DeleteStation",
			Handler:    _AirQualityStationService_DeleteStation_Handler,
		},
		{
			MethodName: "GetStation",
			Handler:    _AirQualityStationService_GetStation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "air_quality_station.proto",
}
