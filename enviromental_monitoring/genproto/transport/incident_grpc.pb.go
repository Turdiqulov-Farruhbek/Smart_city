// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.12.4
// source: incident.proto

package transport

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	IncidemtService_CreateIncident_FullMethodName  = "/transport.IncidemtService/CreateIncident"
	IncidemtService_UpdateIncident_FullMethodName  = "/transport.IncidemtService/UpdateIncident"
	IncidemtService_DeleteIncident_FullMethodName  = "/transport.IncidemtService/DeleteIncident"
	IncidemtService_GetIncident_FullMethodName     = "/transport.IncidemtService/GetIncident"
	IncidemtService_GetAllIncedents_FullMethodName = "/transport.IncidemtService/GetAllIncedents"
)

// IncidemtServiceClient is the client API for IncidemtService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IncidemtServiceClient interface {
	CreateIncident(ctx context.Context, in *IncidentCreate, opts ...grpc.CallOption) (*Incident, error)
	UpdateIncident(ctx context.Context, in *IncidentUpdate, opts ...grpc.CallOption) (*Incident, error)
	DeleteIncident(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Void, error)
	GetIncident(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Incident, error)
	GetAllIncedents(ctx context.Context, in *IncidentFilter, opts ...grpc.CallOption) (*IncidentList, error)
}

type incidemtServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIncidemtServiceClient(cc grpc.ClientConnInterface) IncidemtServiceClient {
	return &incidemtServiceClient{cc}
}

func (c *incidemtServiceClient) CreateIncident(ctx context.Context, in *IncidentCreate, opts ...grpc.CallOption) (*Incident, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Incident)
	err := c.cc.Invoke(ctx, IncidemtService_CreateIncident_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *incidemtServiceClient) UpdateIncident(ctx context.Context, in *IncidentUpdate, opts ...grpc.CallOption) (*Incident, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Incident)
	err := c.cc.Invoke(ctx, IncidemtService_UpdateIncident_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *incidemtServiceClient) DeleteIncident(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Void, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Void)
	err := c.cc.Invoke(ctx, IncidemtService_DeleteIncident_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *incidemtServiceClient) GetIncident(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Incident, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Incident)
	err := c.cc.Invoke(ctx, IncidemtService_GetIncident_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *incidemtServiceClient) GetAllIncedents(ctx context.Context, in *IncidentFilter, opts ...grpc.CallOption) (*IncidentList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IncidentList)
	err := c.cc.Invoke(ctx, IncidemtService_GetAllIncedents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IncidemtServiceServer is the server API for IncidemtService service.
// All implementations must embed UnimplementedIncidemtServiceServer
// for forward compatibility
type IncidemtServiceServer interface {
	CreateIncident(context.Context, *IncidentCreate) (*Incident, error)
	UpdateIncident(context.Context, *IncidentUpdate) (*Incident, error)
	DeleteIncident(context.Context, *ById) (*Void, error)
	GetIncident(context.Context, *ById) (*Incident, error)
	GetAllIncedents(context.Context, *IncidentFilter) (*IncidentList, error)
	mustEmbedUnimplementedIncidemtServiceServer()
}

// UnimplementedIncidemtServiceServer must be embedded to have forward compatible implementations.
type UnimplementedIncidemtServiceServer struct {
}

func (UnimplementedIncidemtServiceServer) CreateIncident(context.Context, *IncidentCreate) (*Incident, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIncident not implemented")
}
func (UnimplementedIncidemtServiceServer) UpdateIncident(context.Context, *IncidentUpdate) (*Incident, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIncident not implemented")
}
func (UnimplementedIncidemtServiceServer) DeleteIncident(context.Context, *ById) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteIncident not implemented")
}
func (UnimplementedIncidemtServiceServer) GetIncident(context.Context, *ById) (*Incident, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIncident not implemented")
}
func (UnimplementedIncidemtServiceServer) GetAllIncedents(context.Context, *IncidentFilter) (*IncidentList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllIncedents not implemented")
}
func (UnimplementedIncidemtServiceServer) mustEmbedUnimplementedIncidemtServiceServer() {}

// UnsafeIncidemtServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IncidemtServiceServer will
// result in compilation errors.
type UnsafeIncidemtServiceServer interface {
	mustEmbedUnimplementedIncidemtServiceServer()
}

func RegisterIncidemtServiceServer(s grpc.ServiceRegistrar, srv IncidemtServiceServer) {
	s.RegisterService(&IncidemtService_ServiceDesc, srv)
}

func _IncidemtService_CreateIncident_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncidentCreate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IncidemtServiceServer).CreateIncident(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IncidemtService_CreateIncident_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IncidemtServiceServer).CreateIncident(ctx, req.(*IncidentCreate))
	}
	return interceptor(ctx, in, info, handler)
}

func _IncidemtService_UpdateIncident_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncidentUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IncidemtServiceServer).UpdateIncident(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IncidemtService_UpdateIncident_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IncidemtServiceServer).UpdateIncident(ctx, req.(*IncidentUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _IncidemtService_DeleteIncident_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IncidemtServiceServer).DeleteIncident(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IncidemtService_DeleteIncident_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IncidemtServiceServer).DeleteIncident(ctx, req.(*ById))
	}
	return interceptor(ctx, in, info, handler)
}

func _IncidemtService_GetIncident_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IncidemtServiceServer).GetIncident(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IncidemtService_GetIncident_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IncidemtServiceServer).GetIncident(ctx, req.(*ById))
	}
	return interceptor(ctx, in, info, handler)
}

func _IncidemtService_GetAllIncedents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncidentFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IncidemtServiceServer).GetAllIncedents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IncidemtService_GetAllIncedents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IncidemtServiceServer).GetAllIncedents(ctx, req.(*IncidentFilter))
	}
	return interceptor(ctx, in, info, handler)
}

// IncidemtService_ServiceDesc is the grpc.ServiceDesc for IncidemtService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IncidemtService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "transport.IncidemtService",
	HandlerType: (*IncidemtServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateIncident",
			Handler:    _IncidemtService_CreateIncident_Handler,
		},
		{
			MethodName: "UpdateIncident",
			Handler:    _IncidemtService_UpdateIncident_Handler,
		},
		{
			MethodName: "DeleteIncident",
			Handler:    _IncidemtService_DeleteIncident_Handler,
		},
		{
			MethodName: "GetIncident",
			Handler:    _IncidemtService_GetIncident_Handler,
		},
		{
			MethodName: "GetAllIncedents",
			Handler:    _IncidemtService_GetAllIncedents_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "incident.proto",
}
