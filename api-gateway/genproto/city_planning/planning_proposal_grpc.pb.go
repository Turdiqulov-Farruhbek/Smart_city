// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.12.4
// source: planning_proposal.proto

package city_planning

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	PlanningProposalService_CreatePlanningProposal_FullMethodName = "/city_planning.PlanningProposalService/CreatePlanningProposal"
	PlanningProposalService_GetPlanningProposals_FullMethodName   = "/city_planning.PlanningProposalService/GetPlanningProposals"
	PlanningProposalService_UpdatePlanningProposal_FullMethodName = "/city_planning.PlanningProposalService/UpdatePlanningProposal"
	PlanningProposalService_DeletePlanningProposal_FullMethodName = "/city_planning.PlanningProposalService/DeletePlanningProposal"
)

// PlanningProposalServiceClient is the client API for PlanningProposalService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PlanningProposalServiceClient interface {
	CreatePlanningProposal(ctx context.Context, in *PlanningProposalCreate, opts ...grpc.CallOption) (*Void, error)
	GetPlanningProposals(ctx context.Context, in *PlanningProposalFilter, opts ...grpc.CallOption) (*PlanningProposalList, error)
	UpdatePlanningProposal(ctx context.Context, in *PlanningProposalCreate, opts ...grpc.CallOption) (*Void, error)
	DeletePlanningProposal(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Void, error)
}

type planningProposalServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPlanningProposalServiceClient(cc grpc.ClientConnInterface) PlanningProposalServiceClient {
	return &planningProposalServiceClient{cc}
}

func (c *planningProposalServiceClient) CreatePlanningProposal(ctx context.Context, in *PlanningProposalCreate, opts ...grpc.CallOption) (*Void, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Void)
	err := c.cc.Invoke(ctx, PlanningProposalService_CreatePlanningProposal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *planningProposalServiceClient) GetPlanningProposals(ctx context.Context, in *PlanningProposalFilter, opts ...grpc.CallOption) (*PlanningProposalList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PlanningProposalList)
	err := c.cc.Invoke(ctx, PlanningProposalService_GetPlanningProposals_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *planningProposalServiceClient) UpdatePlanningProposal(ctx context.Context, in *PlanningProposalCreate, opts ...grpc.CallOption) (*Void, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Void)
	err := c.cc.Invoke(ctx, PlanningProposalService_UpdatePlanningProposal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *planningProposalServiceClient) DeletePlanningProposal(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Void, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Void)
	err := c.cc.Invoke(ctx, PlanningProposalService_DeletePlanningProposal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlanningProposalServiceServer is the server API for PlanningProposalService service.
// All implementations must embed UnimplementedPlanningProposalServiceServer
// for forward compatibility
type PlanningProposalServiceServer interface {
	CreatePlanningProposal(context.Context, *PlanningProposalCreate) (*Void, error)
	GetPlanningProposals(context.Context, *PlanningProposalFilter) (*PlanningProposalList, error)
	UpdatePlanningProposal(context.Context, *PlanningProposalCreate) (*Void, error)
	DeletePlanningProposal(context.Context, *ById) (*Void, error)
	mustEmbedUnimplementedPlanningProposalServiceServer()
}

// UnimplementedPlanningProposalServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPlanningProposalServiceServer struct {
}

func (UnimplementedPlanningProposalServiceServer) CreatePlanningProposal(context.Context, *PlanningProposalCreate) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePlanningProposal not implemented")
}
func (UnimplementedPlanningProposalServiceServer) GetPlanningProposals(context.Context, *PlanningProposalFilter) (*PlanningProposalList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlanningProposals not implemented")
}
func (UnimplementedPlanningProposalServiceServer) UpdatePlanningProposal(context.Context, *PlanningProposalCreate) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePlanningProposal not implemented")
}
func (UnimplementedPlanningProposalServiceServer) DeletePlanningProposal(context.Context, *ById) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePlanningProposal not implemented")
}
func (UnimplementedPlanningProposalServiceServer) mustEmbedUnimplementedPlanningProposalServiceServer() {
}

// UnsafePlanningProposalServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlanningProposalServiceServer will
// result in compilation errors.
type UnsafePlanningProposalServiceServer interface {
	mustEmbedUnimplementedPlanningProposalServiceServer()
}

func RegisterPlanningProposalServiceServer(s grpc.ServiceRegistrar, srv PlanningProposalServiceServer) {
	s.RegisterService(&PlanningProposalService_ServiceDesc, srv)
}

func _PlanningProposalService_CreatePlanningProposal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlanningProposalCreate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlanningProposalServiceServer).CreatePlanningProposal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlanningProposalService_CreatePlanningProposal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlanningProposalServiceServer).CreatePlanningProposal(ctx, req.(*PlanningProposalCreate))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlanningProposalService_GetPlanningProposals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlanningProposalFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlanningProposalServiceServer).GetPlanningProposals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlanningProposalService_GetPlanningProposals_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlanningProposalServiceServer).GetPlanningProposals(ctx, req.(*PlanningProposalFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlanningProposalService_UpdatePlanningProposal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlanningProposalCreate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlanningProposalServiceServer).UpdatePlanningProposal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlanningProposalService_UpdatePlanningProposal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlanningProposalServiceServer).UpdatePlanningProposal(ctx, req.(*PlanningProposalCreate))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlanningProposalService_DeletePlanningProposal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlanningProposalServiceServer).DeletePlanningProposal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlanningProposalService_DeletePlanningProposal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlanningProposalServiceServer).DeletePlanningProposal(ctx, req.(*ById))
	}
	return interceptor(ctx, in, info, handler)
}

// PlanningProposalService_ServiceDesc is the grpc.ServiceDesc for PlanningProposalService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PlanningProposalService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "city_planning.PlanningProposalService",
	HandlerType: (*PlanningProposalServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePlanningProposal",
			Handler:    _PlanningProposalService_CreatePlanningProposal_Handler,
		},
		{
			MethodName: "GetPlanningProposals",
			Handler:    _PlanningProposalService_GetPlanningProposals_Handler,
		},
		{
			MethodName: "UpdatePlanningProposal",
			Handler:    _PlanningProposalService_UpdatePlanningProposal_Handler,
		},
		{
			MethodName: "DeletePlanningProposal",
			Handler:    _PlanningProposalService_DeletePlanningProposal_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "planning_proposal.proto",
}
