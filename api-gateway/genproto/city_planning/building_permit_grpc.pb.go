// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.12.4
// source: building_permit.proto

package city_planning

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	BuildingPermitService_CreateBuildingPermit_FullMethodName = "/city_planning.BuildingPermitService/CreateBuildingPermit"
	BuildingPermitService_DeleteBuildingPermit_FullMethodName = "/city_planning.BuildingPermitService/DeleteBuildingPermit"
	BuildingPermitService_GetBuildingPermits_FullMethodName   = "/city_planning.BuildingPermitService/GetBuildingPermits"
	BuildingPermitService_UpdateBuildingPermit_FullMethodName = "/city_planning.BuildingPermitService/UpdateBuildingPermit"
)

// BuildingPermitServiceClient is the client API for BuildingPermitService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BuildingPermitServiceClient interface {
	CreateBuildingPermit(ctx context.Context, in *BuildingPermitCreate, opts ...grpc.CallOption) (*Void, error)
	DeleteBuildingPermit(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Void, error)
	GetBuildingPermits(ctx context.Context, in *BuildingPermitFilter, opts ...grpc.CallOption) (*BuildingPermitFilter, error)
	UpdateBuildingPermit(ctx context.Context, in *BuildingPermitCreate, opts ...grpc.CallOption) (*Void, error)
}

type buildingPermitServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBuildingPermitServiceClient(cc grpc.ClientConnInterface) BuildingPermitServiceClient {
	return &buildingPermitServiceClient{cc}
}

func (c *buildingPermitServiceClient) CreateBuildingPermit(ctx context.Context, in *BuildingPermitCreate, opts ...grpc.CallOption) (*Void, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Void)
	err := c.cc.Invoke(ctx, BuildingPermitService_CreateBuildingPermit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buildingPermitServiceClient) DeleteBuildingPermit(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Void, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Void)
	err := c.cc.Invoke(ctx, BuildingPermitService_DeleteBuildingPermit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buildingPermitServiceClient) GetBuildingPermits(ctx context.Context, in *BuildingPermitFilter, opts ...grpc.CallOption) (*BuildingPermitFilter, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BuildingPermitFilter)
	err := c.cc.Invoke(ctx, BuildingPermitService_GetBuildingPermits_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buildingPermitServiceClient) UpdateBuildingPermit(ctx context.Context, in *BuildingPermitCreate, opts ...grpc.CallOption) (*Void, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Void)
	err := c.cc.Invoke(ctx, BuildingPermitService_UpdateBuildingPermit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BuildingPermitServiceServer is the server API for BuildingPermitService service.
// All implementations must embed UnimplementedBuildingPermitServiceServer
// for forward compatibility
type BuildingPermitServiceServer interface {
	CreateBuildingPermit(context.Context, *BuildingPermitCreate) (*Void, error)
	DeleteBuildingPermit(context.Context, *ById) (*Void, error)
	GetBuildingPermits(context.Context, *BuildingPermitFilter) (*BuildingPermitFilter, error)
	UpdateBuildingPermit(context.Context, *BuildingPermitCreate) (*Void, error)
	mustEmbedUnimplementedBuildingPermitServiceServer()
}

// UnimplementedBuildingPermitServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBuildingPermitServiceServer struct {
}

func (UnimplementedBuildingPermitServiceServer) CreateBuildingPermit(context.Context, *BuildingPermitCreate) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBuildingPermit not implemented")
}
func (UnimplementedBuildingPermitServiceServer) DeleteBuildingPermit(context.Context, *ById) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBuildingPermit not implemented")
}
func (UnimplementedBuildingPermitServiceServer) GetBuildingPermits(context.Context, *BuildingPermitFilter) (*BuildingPermitFilter, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBuildingPermits not implemented")
}
func (UnimplementedBuildingPermitServiceServer) UpdateBuildingPermit(context.Context, *BuildingPermitCreate) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBuildingPermit not implemented")
}
func (UnimplementedBuildingPermitServiceServer) mustEmbedUnimplementedBuildingPermitServiceServer() {}

// UnsafeBuildingPermitServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BuildingPermitServiceServer will
// result in compilation errors.
type UnsafeBuildingPermitServiceServer interface {
	mustEmbedUnimplementedBuildingPermitServiceServer()
}

func RegisterBuildingPermitServiceServer(s grpc.ServiceRegistrar, srv BuildingPermitServiceServer) {
	s.RegisterService(&BuildingPermitService_ServiceDesc, srv)
}

func _BuildingPermitService_CreateBuildingPermit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuildingPermitCreate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuildingPermitServiceServer).CreateBuildingPermit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BuildingPermitService_CreateBuildingPermit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuildingPermitServiceServer).CreateBuildingPermit(ctx, req.(*BuildingPermitCreate))
	}
	return interceptor(ctx, in, info, handler)
}

func _BuildingPermitService_DeleteBuildingPermit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuildingPermitServiceServer).DeleteBuildingPermit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BuildingPermitService_DeleteBuildingPermit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuildingPermitServiceServer).DeleteBuildingPermit(ctx, req.(*ById))
	}
	return interceptor(ctx, in, info, handler)
}

func _BuildingPermitService_GetBuildingPermits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuildingPermitFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuildingPermitServiceServer).GetBuildingPermits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BuildingPermitService_GetBuildingPermits_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuildingPermitServiceServer).GetBuildingPermits(ctx, req.(*BuildingPermitFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _BuildingPermitService_UpdateBuildingPermit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuildingPermitCreate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuildingPermitServiceServer).UpdateBuildingPermit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BuildingPermitService_UpdateBuildingPermit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuildingPermitServiceServer).UpdateBuildingPermit(ctx, req.(*BuildingPermitCreate))
	}
	return interceptor(ctx, in, info, handler)
}

// BuildingPermitService_ServiceDesc is the grpc.ServiceDesc for BuildingPermitService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BuildingPermitService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "city_planning.BuildingPermitService",
	HandlerType: (*BuildingPermitServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBuildingPermit",
			Handler:    _BuildingPermitService_CreateBuildingPermit_Handler,
		},
		{
			MethodName: "DeleteBuildingPermit",
			Handler:    _BuildingPermitService_DeleteBuildingPermit_Handler,
		},
		{
			MethodName: "GetBuildingPermits",
			Handler:    _BuildingPermitService_GetBuildingPermits_Handler,
		},
		{
			MethodName: "UpdateBuildingPermit",
			Handler:    _BuildingPermitService_UpdateBuildingPermit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "building_permit.proto",
}
