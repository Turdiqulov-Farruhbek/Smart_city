// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.12.4
// source: city_zone.proto

package city_planning

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	CityZoneService_CreateCityZone_FullMethodName = "/city_planning.CityZoneService/CreateCityZone"
	CityZoneService_UpdateCityZone_FullMethodName = "/city_planning.CityZoneService/UpdateCityZone"
	CityZoneService_DeleteCityZone_FullMethodName = "/city_planning.CityZoneService/DeleteCityZone"
	CityZoneService_GetCityZone_FullMethodName    = "/city_planning.CityZoneService/GetCityZone"
)

// CityZoneServiceClient is the client API for CityZoneService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CityZoneServiceClient interface {
	CreateCityZone(ctx context.Context, in *CityZoneCreate, opts ...grpc.CallOption) (*Void, error)
	UpdateCityZone(ctx context.Context, in *CityZoneCreate, opts ...grpc.CallOption) (*Void, error)
	DeleteCityZone(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Void, error)
	GetCityZone(ctx context.Context, in *CityZoneFilter, opts ...grpc.CallOption) (*CityZoneList, error)
}

type cityZoneServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCityZoneServiceClient(cc grpc.ClientConnInterface) CityZoneServiceClient {
	return &cityZoneServiceClient{cc}
}

func (c *cityZoneServiceClient) CreateCityZone(ctx context.Context, in *CityZoneCreate, opts ...grpc.CallOption) (*Void, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Void)
	err := c.cc.Invoke(ctx, CityZoneService_CreateCityZone_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cityZoneServiceClient) UpdateCityZone(ctx context.Context, in *CityZoneCreate, opts ...grpc.CallOption) (*Void, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Void)
	err := c.cc.Invoke(ctx, CityZoneService_UpdateCityZone_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cityZoneServiceClient) DeleteCityZone(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Void, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Void)
	err := c.cc.Invoke(ctx, CityZoneService_DeleteCityZone_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cityZoneServiceClient) GetCityZone(ctx context.Context, in *CityZoneFilter, opts ...grpc.CallOption) (*CityZoneList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CityZoneList)
	err := c.cc.Invoke(ctx, CityZoneService_GetCityZone_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CityZoneServiceServer is the server API for CityZoneService service.
// All implementations must embed UnimplementedCityZoneServiceServer
// for forward compatibility
type CityZoneServiceServer interface {
	CreateCityZone(context.Context, *CityZoneCreate) (*Void, error)
	UpdateCityZone(context.Context, *CityZoneCreate) (*Void, error)
	DeleteCityZone(context.Context, *ById) (*Void, error)
	GetCityZone(context.Context, *CityZoneFilter) (*CityZoneList, error)
	mustEmbedUnimplementedCityZoneServiceServer()
}

// UnimplementedCityZoneServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCityZoneServiceServer struct {
}

func (UnimplementedCityZoneServiceServer) CreateCityZone(context.Context, *CityZoneCreate) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCityZone not implemented")
}
func (UnimplementedCityZoneServiceServer) UpdateCityZone(context.Context, *CityZoneCreate) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCityZone not implemented")
}
func (UnimplementedCityZoneServiceServer) DeleteCityZone(context.Context, *ById) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCityZone not implemented")
}
func (UnimplementedCityZoneServiceServer) GetCityZone(context.Context, *CityZoneFilter) (*CityZoneList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCityZone not implemented")
}
func (UnimplementedCityZoneServiceServer) mustEmbedUnimplementedCityZoneServiceServer() {}

// UnsafeCityZoneServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CityZoneServiceServer will
// result in compilation errors.
type UnsafeCityZoneServiceServer interface {
	mustEmbedUnimplementedCityZoneServiceServer()
}

func RegisterCityZoneServiceServer(s grpc.ServiceRegistrar, srv CityZoneServiceServer) {
	s.RegisterService(&CityZoneService_ServiceDesc, srv)
}

func _CityZoneService_CreateCityZone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CityZoneCreate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CityZoneServiceServer).CreateCityZone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CityZoneService_CreateCityZone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CityZoneServiceServer).CreateCityZone(ctx, req.(*CityZoneCreate))
	}
	return interceptor(ctx, in, info, handler)
}

func _CityZoneService_UpdateCityZone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CityZoneCreate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CityZoneServiceServer).UpdateCityZone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CityZoneService_UpdateCityZone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CityZoneServiceServer).UpdateCityZone(ctx, req.(*CityZoneCreate))
	}
	return interceptor(ctx, in, info, handler)
}

func _CityZoneService_DeleteCityZone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CityZoneServiceServer).DeleteCityZone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CityZoneService_DeleteCityZone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CityZoneServiceServer).DeleteCityZone(ctx, req.(*ById))
	}
	return interceptor(ctx, in, info, handler)
}

func _CityZoneService_GetCityZone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CityZoneFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CityZoneServiceServer).GetCityZone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CityZoneService_GetCityZone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CityZoneServiceServer).GetCityZone(ctx, req.(*CityZoneFilter))
	}
	return interceptor(ctx, in, info, handler)
}

// CityZoneService_ServiceDesc is the grpc.ServiceDesc for CityZoneService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CityZoneService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "city_planning.CityZoneService",
	HandlerType: (*CityZoneServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCityZone",
			Handler:    _CityZoneService_CreateCityZone_Handler,
		},
		{
			MethodName: "UpdateCityZone",
			Handler:    _CityZoneService_UpdateCityZone_Handler,
		},
		{
			MethodName: "DeleteCityZone",
			Handler:    _CityZoneService_DeleteCityZone_Handler,
		},
		{
			MethodName: "GetCityZone",
			Handler:    _CityZoneService_GetCityZone_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "city_zone.proto",
}
