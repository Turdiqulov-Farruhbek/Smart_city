// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.12.4
// source: dispatch.proto

package emergency_response

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	ResourceDispatchService_Create_FullMethodName  = "/emergency_response.ResourceDispatchService/Create"
	ResourceDispatchService_GetById_FullMethodName = "/emergency_response.ResourceDispatchService/GetById"
	ResourceDispatchService_GetAll_FullMethodName  = "/emergency_response.ResourceDispatchService/GetAll"
	ResourceDispatchService_Update_FullMethodName  = "/emergency_response.ResourceDispatchService/Update"
	ResourceDispatchService_Delete_FullMethodName  = "/emergency_response.ResourceDispatchService/Delete"
)

// ResourceDispatchServiceClient is the client API for ResourceDispatchService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ResourceDispatchServiceClient interface {
	Create(ctx context.Context, in *DispatchesCreateReq, opts ...grpc.CallOption) (*DispatchesRes, error)
	GetById(ctx context.Context, in *ById, opts ...grpc.CallOption) (*DispatchesGetByIdRes, error)
	GetAll(ctx context.Context, in *Filter, opts ...grpc.CallOption) (*DispatchesGetAllRes, error)
	Update(ctx context.Context, in *DispatchesUpdateReq, opts ...grpc.CallOption) (*DispatchesRes, error)
	Delete(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Void, error)
}

type resourceDispatchServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewResourceDispatchServiceClient(cc grpc.ClientConnInterface) ResourceDispatchServiceClient {
	return &resourceDispatchServiceClient{cc}
}

func (c *resourceDispatchServiceClient) Create(ctx context.Context, in *DispatchesCreateReq, opts ...grpc.CallOption) (*DispatchesRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DispatchesRes)
	err := c.cc.Invoke(ctx, ResourceDispatchService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceDispatchServiceClient) GetById(ctx context.Context, in *ById, opts ...grpc.CallOption) (*DispatchesGetByIdRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DispatchesGetByIdRes)
	err := c.cc.Invoke(ctx, ResourceDispatchService_GetById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceDispatchServiceClient) GetAll(ctx context.Context, in *Filter, opts ...grpc.CallOption) (*DispatchesGetAllRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DispatchesGetAllRes)
	err := c.cc.Invoke(ctx, ResourceDispatchService_GetAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceDispatchServiceClient) Update(ctx context.Context, in *DispatchesUpdateReq, opts ...grpc.CallOption) (*DispatchesRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DispatchesRes)
	err := c.cc.Invoke(ctx, ResourceDispatchService_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceDispatchServiceClient) Delete(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Void, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Void)
	err := c.cc.Invoke(ctx, ResourceDispatchService_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ResourceDispatchServiceServer is the server API for ResourceDispatchService service.
// All implementations must embed UnimplementedResourceDispatchServiceServer
// for forward compatibility
type ResourceDispatchServiceServer interface {
	Create(context.Context, *DispatchesCreateReq) (*DispatchesRes, error)
	GetById(context.Context, *ById) (*DispatchesGetByIdRes, error)
	GetAll(context.Context, *Filter) (*DispatchesGetAllRes, error)
	Update(context.Context, *DispatchesUpdateReq) (*DispatchesRes, error)
	Delete(context.Context, *ById) (*Void, error)
	mustEmbedUnimplementedResourceDispatchServiceServer()
}

// UnimplementedResourceDispatchServiceServer must be embedded to have forward compatible implementations.
type UnimplementedResourceDispatchServiceServer struct {
}

func (UnimplementedResourceDispatchServiceServer) Create(context.Context, *DispatchesCreateReq) (*DispatchesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedResourceDispatchServiceServer) GetById(context.Context, *ById) (*DispatchesGetByIdRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedResourceDispatchServiceServer) GetAll(context.Context, *Filter) (*DispatchesGetAllRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedResourceDispatchServiceServer) Update(context.Context, *DispatchesUpdateReq) (*DispatchesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedResourceDispatchServiceServer) Delete(context.Context, *ById) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedResourceDispatchServiceServer) mustEmbedUnimplementedResourceDispatchServiceServer() {
}

// UnsafeResourceDispatchServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ResourceDispatchServiceServer will
// result in compilation errors.
type UnsafeResourceDispatchServiceServer interface {
	mustEmbedUnimplementedResourceDispatchServiceServer()
}

func RegisterResourceDispatchServiceServer(s grpc.ServiceRegistrar, srv ResourceDispatchServiceServer) {
	s.RegisterService(&ResourceDispatchService_ServiceDesc, srv)
}

func _ResourceDispatchService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DispatchesCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceDispatchServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceDispatchService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceDispatchServiceServer).Create(ctx, req.(*DispatchesCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceDispatchService_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceDispatchServiceServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceDispatchService_GetById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceDispatchServiceServer).GetById(ctx, req.(*ById))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceDispatchService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Filter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceDispatchServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceDispatchService_GetAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceDispatchServiceServer).GetAll(ctx, req.(*Filter))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceDispatchService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DispatchesUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceDispatchServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceDispatchService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceDispatchServiceServer).Update(ctx, req.(*DispatchesUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceDispatchService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceDispatchServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceDispatchService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceDispatchServiceServer).Delete(ctx, req.(*ById))
	}
	return interceptor(ctx, in, info, handler)
}

// ResourceDispatchService_ServiceDesc is the grpc.ServiceDesc for ResourceDispatchService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ResourceDispatchService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "emergency_response.ResourceDispatchService",
	HandlerType: (*ResourceDispatchServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ResourceDispatchService_Create_Handler,
		},
		{
			MethodName: "GetById",
			Handler:    _ResourceDispatchService_GetById_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _ResourceDispatchService_GetAll_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ResourceDispatchService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ResourceDispatchService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dispatch.proto",
}
