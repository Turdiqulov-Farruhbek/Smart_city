// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.12.4
// source: noise_level_reading.proto

package enviromental_monitoring

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	NoiseLevelReadingService_CreateNoiseLevelReading_FullMethodName = "/enviromental_monitoring.NoiseLevelReadingService/CreateNoiseLevelReading"
	NoiseLevelReadingService_GetNoiseLevelReading_FullMethodName    = "/enviromental_monitoring.NoiseLevelReadingService/GetNoiseLevelReading"
)

// NoiseLevelReadingServiceClient is the client API for NoiseLevelReadingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NoiseLevelReadingServiceClient interface {
	CreateNoiseLevelReading(ctx context.Context, in *NoiseLevelReading, opts ...grpc.CallOption) (*Void, error)
	GetNoiseLevelReading(ctx context.Context, in *ZoneFilter, opts ...grpc.CallOption) (*NoiseLevelReadingList, error)
}

type noiseLevelReadingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNoiseLevelReadingServiceClient(cc grpc.ClientConnInterface) NoiseLevelReadingServiceClient {
	return &noiseLevelReadingServiceClient{cc}
}

func (c *noiseLevelReadingServiceClient) CreateNoiseLevelReading(ctx context.Context, in *NoiseLevelReading, opts ...grpc.CallOption) (*Void, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Void)
	err := c.cc.Invoke(ctx, NoiseLevelReadingService_CreateNoiseLevelReading_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noiseLevelReadingServiceClient) GetNoiseLevelReading(ctx context.Context, in *ZoneFilter, opts ...grpc.CallOption) (*NoiseLevelReadingList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NoiseLevelReadingList)
	err := c.cc.Invoke(ctx, NoiseLevelReadingService_GetNoiseLevelReading_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NoiseLevelReadingServiceServer is the server API for NoiseLevelReadingService service.
// All implementations must embed UnimplementedNoiseLevelReadingServiceServer
// for forward compatibility
type NoiseLevelReadingServiceServer interface {
	CreateNoiseLevelReading(context.Context, *NoiseLevelReading) (*Void, error)
	GetNoiseLevelReading(context.Context, *ZoneFilter) (*NoiseLevelReadingList, error)
	mustEmbedUnimplementedNoiseLevelReadingServiceServer()
}

// UnimplementedNoiseLevelReadingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNoiseLevelReadingServiceServer struct {
}

func (UnimplementedNoiseLevelReadingServiceServer) CreateNoiseLevelReading(context.Context, *NoiseLevelReading) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNoiseLevelReading not implemented")
}
func (UnimplementedNoiseLevelReadingServiceServer) GetNoiseLevelReading(context.Context, *ZoneFilter) (*NoiseLevelReadingList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNoiseLevelReading not implemented")
}
func (UnimplementedNoiseLevelReadingServiceServer) mustEmbedUnimplementedNoiseLevelReadingServiceServer() {
}

// UnsafeNoiseLevelReadingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NoiseLevelReadingServiceServer will
// result in compilation errors.
type UnsafeNoiseLevelReadingServiceServer interface {
	mustEmbedUnimplementedNoiseLevelReadingServiceServer()
}

func RegisterNoiseLevelReadingServiceServer(s grpc.ServiceRegistrar, srv NoiseLevelReadingServiceServer) {
	s.RegisterService(&NoiseLevelReadingService_ServiceDesc, srv)
}

func _NoiseLevelReadingService_CreateNoiseLevelReading_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoiseLevelReading)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoiseLevelReadingServiceServer).CreateNoiseLevelReading(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NoiseLevelReadingService_CreateNoiseLevelReading_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoiseLevelReadingServiceServer).CreateNoiseLevelReading(ctx, req.(*NoiseLevelReading))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoiseLevelReadingService_GetNoiseLevelReading_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ZoneFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoiseLevelReadingServiceServer).GetNoiseLevelReading(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NoiseLevelReadingService_GetNoiseLevelReading_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoiseLevelReadingServiceServer).GetNoiseLevelReading(ctx, req.(*ZoneFilter))
	}
	return interceptor(ctx, in, info, handler)
}

// NoiseLevelReadingService_ServiceDesc is the grpc.ServiceDesc for NoiseLevelReadingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NoiseLevelReadingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "enviromental_monitoring.NoiseLevelReadingService",
	HandlerType: (*NoiseLevelReadingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNoiseLevelReading",
			Handler:    _NoiseLevelReadingService_CreateNoiseLevelReading_Handler,
		},
		{
			MethodName: "GetNoiseLevelReading",
			Handler:    _NoiseLevelReadingService_GetNoiseLevelReading_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "noise_level_reading.proto",
}
