// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.12.4
// source: recycling_center.proto

package enviromental_monitoring

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	RecyclingCenterService_CreateRecyclingCenter_FullMethodName = "/enviromental_monitoring.RecyclingCenterService/CreateRecyclingCenter"
	RecyclingCenterService_UpdateRecyclingCenter_FullMethodName = "/enviromental_monitoring.RecyclingCenterService/UpdateRecyclingCenter"
	RecyclingCenterService_DeleteRecyclingCenter_FullMethodName = "/enviromental_monitoring.RecyclingCenterService/DeleteRecyclingCenter"
	RecyclingCenterService_GetRecyclingCenters_FullMethodName   = "/enviromental_monitoring.RecyclingCenterService/GetRecyclingCenters"
)

// RecyclingCenterServiceClient is the client API for RecyclingCenterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RecyclingCenterServiceClient interface {
	CreateRecyclingCenter(ctx context.Context, in *RecyclingCenterCreate, opts ...grpc.CallOption) (*Void, error)
	UpdateRecyclingCenter(ctx context.Context, in *RecyclingCenterCreate, opts ...grpc.CallOption) (*Void, error)
	DeleteRecyclingCenter(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Void, error)
	GetRecyclingCenters(ctx context.Context, in *RecyclingCenterFilter, opts ...grpc.CallOption) (*RecyclingCenterList, error)
}

type recyclingCenterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRecyclingCenterServiceClient(cc grpc.ClientConnInterface) RecyclingCenterServiceClient {
	return &recyclingCenterServiceClient{cc}
}

func (c *recyclingCenterServiceClient) CreateRecyclingCenter(ctx context.Context, in *RecyclingCenterCreate, opts ...grpc.CallOption) (*Void, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Void)
	err := c.cc.Invoke(ctx, RecyclingCenterService_CreateRecyclingCenter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recyclingCenterServiceClient) UpdateRecyclingCenter(ctx context.Context, in *RecyclingCenterCreate, opts ...grpc.CallOption) (*Void, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Void)
	err := c.cc.Invoke(ctx, RecyclingCenterService_UpdateRecyclingCenter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recyclingCenterServiceClient) DeleteRecyclingCenter(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Void, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Void)
	err := c.cc.Invoke(ctx, RecyclingCenterService_DeleteRecyclingCenter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recyclingCenterServiceClient) GetRecyclingCenters(ctx context.Context, in *RecyclingCenterFilter, opts ...grpc.CallOption) (*RecyclingCenterList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RecyclingCenterList)
	err := c.cc.Invoke(ctx, RecyclingCenterService_GetRecyclingCenters_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RecyclingCenterServiceServer is the server API for RecyclingCenterService service.
// All implementations must embed UnimplementedRecyclingCenterServiceServer
// for forward compatibility
type RecyclingCenterServiceServer interface {
	CreateRecyclingCenter(context.Context, *RecyclingCenterCreate) (*Void, error)
	UpdateRecyclingCenter(context.Context, *RecyclingCenterCreate) (*Void, error)
	DeleteRecyclingCenter(context.Context, *ById) (*Void, error)
	GetRecyclingCenters(context.Context, *RecyclingCenterFilter) (*RecyclingCenterList, error)
	mustEmbedUnimplementedRecyclingCenterServiceServer()
}

// UnimplementedRecyclingCenterServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRecyclingCenterServiceServer struct {
}

func (UnimplementedRecyclingCenterServiceServer) CreateRecyclingCenter(context.Context, *RecyclingCenterCreate) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRecyclingCenter not implemented")
}
func (UnimplementedRecyclingCenterServiceServer) UpdateRecyclingCenter(context.Context, *RecyclingCenterCreate) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRecyclingCenter not implemented")
}
func (UnimplementedRecyclingCenterServiceServer) DeleteRecyclingCenter(context.Context, *ById) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRecyclingCenter not implemented")
}
func (UnimplementedRecyclingCenterServiceServer) GetRecyclingCenters(context.Context, *RecyclingCenterFilter) (*RecyclingCenterList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecyclingCenters not implemented")
}
func (UnimplementedRecyclingCenterServiceServer) mustEmbedUnimplementedRecyclingCenterServiceServer() {
}

// UnsafeRecyclingCenterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RecyclingCenterServiceServer will
// result in compilation errors.
type UnsafeRecyclingCenterServiceServer interface {
	mustEmbedUnimplementedRecyclingCenterServiceServer()
}

func RegisterRecyclingCenterServiceServer(s grpc.ServiceRegistrar, srv RecyclingCenterServiceServer) {
	s.RegisterService(&RecyclingCenterService_ServiceDesc, srv)
}

func _RecyclingCenterService_CreateRecyclingCenter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecyclingCenterCreate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecyclingCenterServiceServer).CreateRecyclingCenter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecyclingCenterService_CreateRecyclingCenter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecyclingCenterServiceServer).CreateRecyclingCenter(ctx, req.(*RecyclingCenterCreate))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecyclingCenterService_UpdateRecyclingCenter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecyclingCenterCreate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecyclingCenterServiceServer).UpdateRecyclingCenter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecyclingCenterService_UpdateRecyclingCenter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecyclingCenterServiceServer).UpdateRecyclingCenter(ctx, req.(*RecyclingCenterCreate))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecyclingCenterService_DeleteRecyclingCenter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecyclingCenterServiceServer).DeleteRecyclingCenter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecyclingCenterService_DeleteRecyclingCenter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecyclingCenterServiceServer).DeleteRecyclingCenter(ctx, req.(*ById))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecyclingCenterService_GetRecyclingCenters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecyclingCenterFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecyclingCenterServiceServer).GetRecyclingCenters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecyclingCenterService_GetRecyclingCenters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecyclingCenterServiceServer).GetRecyclingCenters(ctx, req.(*RecyclingCenterFilter))
	}
	return interceptor(ctx, in, info, handler)
}

// RecyclingCenterService_ServiceDesc is the grpc.ServiceDesc for RecyclingCenterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RecyclingCenterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "enviromental_monitoring.RecyclingCenterService",
	HandlerType: (*RecyclingCenterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRecyclingCenter",
			Handler:    _RecyclingCenterService_CreateRecyclingCenter_Handler,
		},
		{
			MethodName: "UpdateRecyclingCenter",
			Handler:    _RecyclingCenterService_UpdateRecyclingCenter_Handler,
		},
		{
			MethodName: "DeleteRecyclingCenter",
			Handler:    _RecyclingCenterService_DeleteRecyclingCenter_Handler,
		},
		{
			MethodName: "GetRecyclingCenters",
			Handler:    _RecyclingCenterService_GetRecyclingCenters_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "recycling_center.proto",
}
