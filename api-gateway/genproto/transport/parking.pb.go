// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v3.12.4
// source: parking.proto

package transport

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ParkingLot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LotId          string `protobuf:"bytes,1,opt,name=LotId,proto3" json:"LotId,omitempty"`
	LotName        string `protobuf:"bytes,2,opt,name=LotName,proto3" json:"LotName,omitempty"`
	TotalSpaces    int32  `protobuf:"varint,3,opt,name=TotalSpaces,proto3" json:"TotalSpaces,omitempty"`
	OccupiedSpaces int32  `protobuf:"varint,4,opt,name=OccupiedSpaces,proto3" json:"OccupiedSpaces,omitempty"`
	FreeSpaces     int32  `protobuf:"varint,5,opt,name=FreeSpaces,proto3" json:"FreeSpaces,omitempty"`
	Address        string `protobuf:"bytes,6,opt,name=Address,proto3" json:"Address,omitempty"`
	CreatedAt      string `protobuf:"bytes,7,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	UpdatedAt      string `protobuf:"bytes,8,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
	DeletedAt      string `protobuf:"bytes,9,opt,name=DeletedAt,proto3" json:"DeletedAt,omitempty"`
}

func (x *ParkingLot) Reset() {
	*x = ParkingLot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_parking_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParkingLot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParkingLot) ProtoMessage() {}

func (x *ParkingLot) ProtoReflect() protoreflect.Message {
	mi := &file_parking_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParkingLot.ProtoReflect.Descriptor instead.
func (*ParkingLot) Descriptor() ([]byte, []int) {
	return file_parking_proto_rawDescGZIP(), []int{0}
}

func (x *ParkingLot) GetLotId() string {
	if x != nil {
		return x.LotId
	}
	return ""
}

func (x *ParkingLot) GetLotName() string {
	if x != nil {
		return x.LotName
	}
	return ""
}

func (x *ParkingLot) GetTotalSpaces() int32 {
	if x != nil {
		return x.TotalSpaces
	}
	return 0
}

func (x *ParkingLot) GetOccupiedSpaces() int32 {
	if x != nil {
		return x.OccupiedSpaces
	}
	return 0
}

func (x *ParkingLot) GetFreeSpaces() int32 {
	if x != nil {
		return x.FreeSpaces
	}
	return 0
}

func (x *ParkingLot) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *ParkingLot) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *ParkingLot) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *ParkingLot) GetDeletedAt() string {
	if x != nil {
		return x.DeletedAt
	}
	return ""
}

type ParkingLotCreate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LotName        string `protobuf:"bytes,1,opt,name=LotName,proto3" json:"LotName,omitempty"`
	TotalSpaces    int32  `protobuf:"varint,2,opt,name=TotalSpaces,proto3" json:"TotalSpaces,omitempty"`
	OccupiedSpaces int32  `protobuf:"varint,3,opt,name=OccupiedSpaces,proto3" json:"OccupiedSpaces,omitempty"`
	FreeSpaces     int32  `protobuf:"varint,4,opt,name=FreeSpaces,proto3" json:"FreeSpaces,omitempty"`
	Address        string `protobuf:"bytes,5,opt,name=Address,proto3" json:"Address,omitempty"`
}

func (x *ParkingLotCreate) Reset() {
	*x = ParkingLotCreate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_parking_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParkingLotCreate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParkingLotCreate) ProtoMessage() {}

func (x *ParkingLotCreate) ProtoReflect() protoreflect.Message {
	mi := &file_parking_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParkingLotCreate.ProtoReflect.Descriptor instead.
func (*ParkingLotCreate) Descriptor() ([]byte, []int) {
	return file_parking_proto_rawDescGZIP(), []int{1}
}

func (x *ParkingLotCreate) GetLotName() string {
	if x != nil {
		return x.LotName
	}
	return ""
}

func (x *ParkingLotCreate) GetTotalSpaces() int32 {
	if x != nil {
		return x.TotalSpaces
	}
	return 0
}

func (x *ParkingLotCreate) GetOccupiedSpaces() int32 {
	if x != nil {
		return x.OccupiedSpaces
	}
	return 0
}

func (x *ParkingLotCreate) GetFreeSpaces() int32 {
	if x != nil {
		return x.FreeSpaces
	}
	return 0
}

func (x *ParkingLotCreate) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type ParkingLotUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LotId          string `protobuf:"bytes,1,opt,name=LotId,proto3" json:"LotId,omitempty"`
	LotName        string `protobuf:"bytes,2,opt,name=LotName,proto3" json:"LotName,omitempty"`
	TotalSpaces    int32  `protobuf:"varint,3,opt,name=TotalSpaces,proto3" json:"TotalSpaces,omitempty"`
	OccupiedSpaces int32  `protobuf:"varint,4,opt,name=OccupiedSpaces,proto3" json:"OccupiedSpaces,omitempty"`
	FreeSpaces     int32  `protobuf:"varint,5,opt,name=FreeSpaces,proto3" json:"FreeSpaces,omitempty"`
	Address        string `protobuf:"bytes,6,opt,name=Address,proto3" json:"Address,omitempty"`
}

func (x *ParkingLotUpdate) Reset() {
	*x = ParkingLotUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_parking_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParkingLotUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParkingLotUpdate) ProtoMessage() {}

func (x *ParkingLotUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_parking_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParkingLotUpdate.ProtoReflect.Descriptor instead.
func (*ParkingLotUpdate) Descriptor() ([]byte, []int) {
	return file_parking_proto_rawDescGZIP(), []int{2}
}

func (x *ParkingLotUpdate) GetLotId() string {
	if x != nil {
		return x.LotId
	}
	return ""
}

func (x *ParkingLotUpdate) GetLotName() string {
	if x != nil {
		return x.LotName
	}
	return ""
}

func (x *ParkingLotUpdate) GetTotalSpaces() int32 {
	if x != nil {
		return x.TotalSpaces
	}
	return 0
}

func (x *ParkingLotUpdate) GetOccupiedSpaces() int32 {
	if x != nil {
		return x.OccupiedSpaces
	}
	return 0
}

func (x *ParkingLotUpdate) GetFreeSpaces() int32 {
	if x != nil {
		return x.FreeSpaces
	}
	return 0
}

func (x *ParkingLotUpdate) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type ParkingLotFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MinTotalSpcaes int32   `protobuf:"varint,1,opt,name=MinTotalSpcaes,proto3" json:"MinTotalSpcaes,omitempty"`
	MinFreeSpcaes  int32   `protobuf:"varint,2,opt,name=MinFreeSpcaes,proto3" json:"MinFreeSpcaes,omitempty"`
	MaxTotalSpcaes int32   `protobuf:"varint,3,opt,name=MaxTotalSpcaes,proto3" json:"MaxTotalSpcaes,omitempty"`
	MaxFreeSpcaes  int32   `protobuf:"varint,4,opt,name=MaxFreeSpcaes,proto3" json:"MaxFreeSpcaes,omitempty"`
	Filter         *Filter `protobuf:"bytes,5,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *ParkingLotFilter) Reset() {
	*x = ParkingLotFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_parking_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParkingLotFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParkingLotFilter) ProtoMessage() {}

func (x *ParkingLotFilter) ProtoReflect() protoreflect.Message {
	mi := &file_parking_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParkingLotFilter.ProtoReflect.Descriptor instead.
func (*ParkingLotFilter) Descriptor() ([]byte, []int) {
	return file_parking_proto_rawDescGZIP(), []int{3}
}

func (x *ParkingLotFilter) GetMinTotalSpcaes() int32 {
	if x != nil {
		return x.MinTotalSpcaes
	}
	return 0
}

func (x *ParkingLotFilter) GetMinFreeSpcaes() int32 {
	if x != nil {
		return x.MinFreeSpcaes
	}
	return 0
}

func (x *ParkingLotFilter) GetMaxTotalSpcaes() int32 {
	if x != nil {
		return x.MaxTotalSpcaes
	}
	return 0
}

func (x *ParkingLotFilter) GetMaxFreeSpcaes() int32 {
	if x != nil {
		return x.MaxFreeSpcaes
	}
	return 0
}

func (x *ParkingLotFilter) GetFilter() *Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type PakingLotList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParkingLots []*ParkingLot `protobuf:"bytes,1,rep,name=ParkingLots,proto3" json:"ParkingLots,omitempty"`
	Count       int32         `protobuf:"varint,2,opt,name=Count,proto3" json:"Count,omitempty"`
}

func (x *PakingLotList) Reset() {
	*x = PakingLotList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_parking_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PakingLotList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PakingLotList) ProtoMessage() {}

func (x *PakingLotList) ProtoReflect() protoreflect.Message {
	mi := &file_parking_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PakingLotList.ProtoReflect.Descriptor instead.
func (*PakingLotList) Descriptor() ([]byte, []int) {
	return file_parking_proto_rawDescGZIP(), []int{4}
}

func (x *PakingLotList) GetParkingLots() []*ParkingLot {
	if x != nil {
		return x.ParkingLots
	}
	return nil
}

func (x *PakingLotList) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type ParkingSpace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpaceId      string `protobuf:"bytes,1,opt,name=SpaceId,proto3" json:"SpaceId,omitempty"`
	LotId        string `protobuf:"bytes,2,opt,name=LotId,proto3" json:"LotId,omitempty"`
	SpacesNumber int32  `protobuf:"varint,3,opt,name=SpacesNumber,proto3" json:"SpacesNumber,omitempty"`
	IsOccupied   bool   `protobuf:"varint,4,opt,name=IsOccupied,proto3" json:"IsOccupied,omitempty"`
	CreatedAt    string `protobuf:"bytes,5,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	UpdatedAt    string `protobuf:"bytes,6,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
	DeletedAt    string `protobuf:"bytes,7,opt,name=DeletedAt,proto3" json:"DeletedAt,omitempty"`
}

func (x *ParkingSpace) Reset() {
	*x = ParkingSpace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_parking_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParkingSpace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParkingSpace) ProtoMessage() {}

func (x *ParkingSpace) ProtoReflect() protoreflect.Message {
	mi := &file_parking_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParkingSpace.ProtoReflect.Descriptor instead.
func (*ParkingSpace) Descriptor() ([]byte, []int) {
	return file_parking_proto_rawDescGZIP(), []int{5}
}

func (x *ParkingSpace) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

func (x *ParkingSpace) GetLotId() string {
	if x != nil {
		return x.LotId
	}
	return ""
}

func (x *ParkingSpace) GetSpacesNumber() int32 {
	if x != nil {
		return x.SpacesNumber
	}
	return 0
}

func (x *ParkingSpace) GetIsOccupied() bool {
	if x != nil {
		return x.IsOccupied
	}
	return false
}

func (x *ParkingSpace) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *ParkingSpace) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *ParkingSpace) GetDeletedAt() string {
	if x != nil {
		return x.DeletedAt
	}
	return ""
}

type ParkingSpaceUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpaceId      string `protobuf:"bytes,1,opt,name=SpaceId,proto3" json:"SpaceId,omitempty"`
	LotId        string `protobuf:"bytes,2,opt,name=LotId,proto3" json:"LotId,omitempty"`
	SpacesNumber int32  `protobuf:"varint,3,opt,name=SpacesNumber,proto3" json:"SpacesNumber,omitempty"`
	IsOccupied   bool   `protobuf:"varint,4,opt,name=IsOccupied,proto3" json:"IsOccupied,omitempty"`
}

func (x *ParkingSpaceUpdate) Reset() {
	*x = ParkingSpaceUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_parking_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParkingSpaceUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParkingSpaceUpdate) ProtoMessage() {}

func (x *ParkingSpaceUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_parking_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParkingSpaceUpdate.ProtoReflect.Descriptor instead.
func (*ParkingSpaceUpdate) Descriptor() ([]byte, []int) {
	return file_parking_proto_rawDescGZIP(), []int{6}
}

func (x *ParkingSpaceUpdate) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

func (x *ParkingSpaceUpdate) GetLotId() string {
	if x != nil {
		return x.LotId
	}
	return ""
}

func (x *ParkingSpaceUpdate) GetSpacesNumber() int32 {
	if x != nil {
		return x.SpacesNumber
	}
	return 0
}

func (x *ParkingSpaceUpdate) GetIsOccupied() bool {
	if x != nil {
		return x.IsOccupied
	}
	return false
}

type ParkingSpaceCreate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LotId        string `protobuf:"bytes,1,opt,name=LotId,proto3" json:"LotId,omitempty"`
	SpacesNumber int32  `protobuf:"varint,2,opt,name=SpacesNumber,proto3" json:"SpacesNumber,omitempty"`
	IsOccupied   bool   `protobuf:"varint,3,opt,name=IsOccupied,proto3" json:"IsOccupied,omitempty"`
}

func (x *ParkingSpaceCreate) Reset() {
	*x = ParkingSpaceCreate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_parking_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParkingSpaceCreate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParkingSpaceCreate) ProtoMessage() {}

func (x *ParkingSpaceCreate) ProtoReflect() protoreflect.Message {
	mi := &file_parking_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParkingSpaceCreate.ProtoReflect.Descriptor instead.
func (*ParkingSpaceCreate) Descriptor() ([]byte, []int) {
	return file_parking_proto_rawDescGZIP(), []int{7}
}

func (x *ParkingSpaceCreate) GetLotId() string {
	if x != nil {
		return x.LotId
	}
	return ""
}

func (x *ParkingSpaceCreate) GetSpacesNumber() int32 {
	if x != nil {
		return x.SpacesNumber
	}
	return 0
}

func (x *ParkingSpaceCreate) GetIsOccupied() bool {
	if x != nil {
		return x.IsOccupied
	}
	return false
}

type ParkingSpaceFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LotId        string  `protobuf:"bytes,1,opt,name=LotId,proto3" json:"LotId,omitempty"`
	SpacesNumber int32   `protobuf:"varint,2,opt,name=SpacesNumber,proto3" json:"SpacesNumber,omitempty"`
	IsOccupied   bool    `protobuf:"varint,3,opt,name=IsOccupied,proto3" json:"IsOccupied,omitempty"`
	Filter       *Filter `protobuf:"bytes,4,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *ParkingSpaceFilter) Reset() {
	*x = ParkingSpaceFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_parking_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParkingSpaceFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParkingSpaceFilter) ProtoMessage() {}

func (x *ParkingSpaceFilter) ProtoReflect() protoreflect.Message {
	mi := &file_parking_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParkingSpaceFilter.ProtoReflect.Descriptor instead.
func (*ParkingSpaceFilter) Descriptor() ([]byte, []int) {
	return file_parking_proto_rawDescGZIP(), []int{8}
}

func (x *ParkingSpaceFilter) GetLotId() string {
	if x != nil {
		return x.LotId
	}
	return ""
}

func (x *ParkingSpaceFilter) GetSpacesNumber() int32 {
	if x != nil {
		return x.SpacesNumber
	}
	return 0
}

func (x *ParkingSpaceFilter) GetIsOccupied() bool {
	if x != nil {
		return x.IsOccupied
	}
	return false
}

func (x *ParkingSpaceFilter) GetFilter() *Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type ParkingSpaceList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParkingSpaces []*ParkingSpace `protobuf:"bytes,1,rep,name=parkingSpaces,proto3" json:"parkingSpaces,omitempty"`
	Count         int32           `protobuf:"varint,2,opt,name=Count,proto3" json:"Count,omitempty"`
}

func (x *ParkingSpaceList) Reset() {
	*x = ParkingSpaceList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_parking_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParkingSpaceList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParkingSpaceList) ProtoMessage() {}

func (x *ParkingSpaceList) ProtoReflect() protoreflect.Message {
	mi := &file_parking_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParkingSpaceList.ProtoReflect.Descriptor instead.
func (*ParkingSpaceList) Descriptor() ([]byte, []int) {
	return file_parking_proto_rawDescGZIP(), []int{9}
}

func (x *ParkingSpaceList) GetParkingSpaces() []*ParkingSpace {
	if x != nil {
		return x.ParkingSpaces
	}
	return nil
}

func (x *ParkingSpaceList) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type ParkingReservation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReservationId  string `protobuf:"bytes,1,opt,name=ReservationId,proto3" json:"ReservationId,omitempty"`
	ParkingSpaceId string `protobuf:"bytes,2,opt,name=ParkingSpaceId,proto3" json:"ParkingSpaceId,omitempty"`
	CitizenId      string `protobuf:"bytes,3,opt,name=CitizenId,proto3" json:"CitizenId,omitempty"`
	TimeFrom       string `protobuf:"bytes,4,opt,name=TimeFrom,proto3" json:"TimeFrom,omitempty"`
	TimeTo         string `protobuf:"bytes,5,opt,name=TimeTo,proto3" json:"TimeTo,omitempty"`
	Status         string `protobuf:"bytes,6,opt,name=Status,proto3" json:"Status,omitempty"`
	CreatedAt      string `protobuf:"bytes,7,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	UpdatedAt      string `protobuf:"bytes,8,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
	DeletedAt      string `protobuf:"bytes,9,opt,name=DeletedAt,proto3" json:"DeletedAt,omitempty"`
}

func (x *ParkingReservation) Reset() {
	*x = ParkingReservation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_parking_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParkingReservation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParkingReservation) ProtoMessage() {}

func (x *ParkingReservation) ProtoReflect() protoreflect.Message {
	mi := &file_parking_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParkingReservation.ProtoReflect.Descriptor instead.
func (*ParkingReservation) Descriptor() ([]byte, []int) {
	return file_parking_proto_rawDescGZIP(), []int{10}
}

func (x *ParkingReservation) GetReservationId() string {
	if x != nil {
		return x.ReservationId
	}
	return ""
}

func (x *ParkingReservation) GetParkingSpaceId() string {
	if x != nil {
		return x.ParkingSpaceId
	}
	return ""
}

func (x *ParkingReservation) GetCitizenId() string {
	if x != nil {
		return x.CitizenId
	}
	return ""
}

func (x *ParkingReservation) GetTimeFrom() string {
	if x != nil {
		return x.TimeFrom
	}
	return ""
}

func (x *ParkingReservation) GetTimeTo() string {
	if x != nil {
		return x.TimeTo
	}
	return ""
}

func (x *ParkingReservation) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ParkingReservation) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *ParkingReservation) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *ParkingReservation) GetDeletedAt() string {
	if x != nil {
		return x.DeletedAt
	}
	return ""
}

type ParkingReservationCreate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParkingSpaceId string `protobuf:"bytes,1,opt,name=ParkingSpaceId,proto3" json:"ParkingSpaceId,omitempty"`
	CitizenId      string `protobuf:"bytes,2,opt,name=CitizenId,proto3" json:"CitizenId,omitempty"`
	TimeFrom       string `protobuf:"bytes,3,opt,name=TimeFrom,proto3" json:"TimeFrom,omitempty"`
	TimeTo         string `protobuf:"bytes,4,opt,name=TimeTo,proto3" json:"TimeTo,omitempty"`
	Status         string `protobuf:"bytes,5,opt,name=Status,proto3" json:"Status,omitempty"`
}

func (x *ParkingReservationCreate) Reset() {
	*x = ParkingReservationCreate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_parking_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParkingReservationCreate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParkingReservationCreate) ProtoMessage() {}

func (x *ParkingReservationCreate) ProtoReflect() protoreflect.Message {
	mi := &file_parking_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParkingReservationCreate.ProtoReflect.Descriptor instead.
func (*ParkingReservationCreate) Descriptor() ([]byte, []int) {
	return file_parking_proto_rawDescGZIP(), []int{11}
}

func (x *ParkingReservationCreate) GetParkingSpaceId() string {
	if x != nil {
		return x.ParkingSpaceId
	}
	return ""
}

func (x *ParkingReservationCreate) GetCitizenId() string {
	if x != nil {
		return x.CitizenId
	}
	return ""
}

func (x *ParkingReservationCreate) GetTimeFrom() string {
	if x != nil {
		return x.TimeFrom
	}
	return ""
}

func (x *ParkingReservationCreate) GetTimeTo() string {
	if x != nil {
		return x.TimeTo
	}
	return ""
}

func (x *ParkingReservationCreate) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type ParkingReservationUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReservationId  string `protobuf:"bytes,1,opt,name=ReservationId,proto3" json:"ReservationId,omitempty"`
	ParkingSpaceId string `protobuf:"bytes,2,opt,name=ParkingSpaceId,proto3" json:"ParkingSpaceId,omitempty"`
	CitizenId      string `protobuf:"bytes,3,opt,name=CitizenId,proto3" json:"CitizenId,omitempty"`
	TimeFrom       string `protobuf:"bytes,4,opt,name=TimeFrom,proto3" json:"TimeFrom,omitempty"`
	TimeTo         string `protobuf:"bytes,5,opt,name=TimeTo,proto3" json:"TimeTo,omitempty"`
	Status         string `protobuf:"bytes,6,opt,name=Status,proto3" json:"Status,omitempty"`
}

func (x *ParkingReservationUpdate) Reset() {
	*x = ParkingReservationUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_parking_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParkingReservationUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParkingReservationUpdate) ProtoMessage() {}

func (x *ParkingReservationUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_parking_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParkingReservationUpdate.ProtoReflect.Descriptor instead.
func (*ParkingReservationUpdate) Descriptor() ([]byte, []int) {
	return file_parking_proto_rawDescGZIP(), []int{12}
}

func (x *ParkingReservationUpdate) GetReservationId() string {
	if x != nil {
		return x.ReservationId
	}
	return ""
}

func (x *ParkingReservationUpdate) GetParkingSpaceId() string {
	if x != nil {
		return x.ParkingSpaceId
	}
	return ""
}

func (x *ParkingReservationUpdate) GetCitizenId() string {
	if x != nil {
		return x.CitizenId
	}
	return ""
}

func (x *ParkingReservationUpdate) GetTimeFrom() string {
	if x != nil {
		return x.TimeFrom
	}
	return ""
}

func (x *ParkingReservationUpdate) GetTimeTo() string {
	if x != nil {
		return x.TimeTo
	}
	return ""
}

func (x *ParkingReservationUpdate) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type ParkingReservationFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParkingSpaceId string  `protobuf:"bytes,1,opt,name=ParkingSpaceId,proto3" json:"ParkingSpaceId,omitempty"`
	CitizenId      string  `protobuf:"bytes,2,opt,name=CitizenId,proto3" json:"CitizenId,omitempty"`
	Time           string  `protobuf:"bytes,3,opt,name=Time,proto3" json:"Time,omitempty"`
	Status         string  `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	Filter         *Filter `protobuf:"bytes,5,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *ParkingReservationFilter) Reset() {
	*x = ParkingReservationFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_parking_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParkingReservationFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParkingReservationFilter) ProtoMessage() {}

func (x *ParkingReservationFilter) ProtoReflect() protoreflect.Message {
	mi := &file_parking_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParkingReservationFilter.ProtoReflect.Descriptor instead.
func (*ParkingReservationFilter) Descriptor() ([]byte, []int) {
	return file_parking_proto_rawDescGZIP(), []int{13}
}

func (x *ParkingReservationFilter) GetParkingSpaceId() string {
	if x != nil {
		return x.ParkingSpaceId
	}
	return ""
}

func (x *ParkingReservationFilter) GetCitizenId() string {
	if x != nil {
		return x.CitizenId
	}
	return ""
}

func (x *ParkingReservationFilter) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

func (x *ParkingReservationFilter) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ParkingReservationFilter) GetFilter() *Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type ParkingReservationList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParkingReservations []*ParkingReservation `protobuf:"bytes,1,rep,name=parkingReservations,proto3" json:"parkingReservations,omitempty"`
	Count               int32                 `protobuf:"varint,2,opt,name=Count,proto3" json:"Count,omitempty"`
}

func (x *ParkingReservationList) Reset() {
	*x = ParkingReservationList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_parking_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParkingReservationList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParkingReservationList) ProtoMessage() {}

func (x *ParkingReservationList) ProtoReflect() protoreflect.Message {
	mi := &file_parking_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParkingReservationList.ProtoReflect.Descriptor instead.
func (*ParkingReservationList) Descriptor() ([]byte, []int) {
	return file_parking_proto_rawDescGZIP(), []int{14}
}

func (x *ParkingReservationList) GetParkingReservations() []*ParkingReservation {
	if x != nil {
		return x.ParkingReservations
	}
	return nil
}

func (x *ParkingReservationList) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

var File_parking_proto protoreflect.FileDescriptor

var file_parking_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x70, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x1a, 0x0d, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x37, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9a, 0x02, 0x0a, 0x0a, 0x50, 0x61,
	0x72, 0x6b, 0x69, 0x6e, 0x67, 0x4c, 0x6f, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x6f, 0x74, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4c, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x4c, 0x6f, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x4c, 0x6f, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x53, 0x70, 0x61, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x53, 0x70, 0x61, 0x63, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x4f, 0x63,
	0x63, 0x75, 0x70, 0x69, 0x65, 0x64, 0x53, 0x70, 0x61, 0x63, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0e, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x69, 0x65, 0x64, 0x53, 0x70, 0x61, 0x63,
	0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x46, 0x72, 0x65, 0x65, 0x53, 0x70, 0x61, 0x63, 0x65, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x46, 0x72, 0x65, 0x65, 0x53, 0x70, 0x61, 0x63,
	0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xb0, 0x01, 0x0a, 0x10, 0x50, 0x61, 0x72, 0x6b, 0x69,
	0x6e, 0x67, 0x4c, 0x6f, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4c,
	0x6f, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4c, 0x6f,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x70,
	0x61, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x53, 0x70, 0x61, 0x63, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x4f, 0x63, 0x63, 0x75, 0x70,
	0x69, 0x65, 0x64, 0x53, 0x70, 0x61, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0e, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x69, 0x65, 0x64, 0x53, 0x70, 0x61, 0x63, 0x65, 0x73, 0x12,
	0x1e, 0x0a, 0x0a, 0x46, 0x72, 0x65, 0x65, 0x53, 0x70, 0x61, 0x63, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x46, 0x72, 0x65, 0x65, 0x53, 0x70, 0x61, 0x63, 0x65, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xc6, 0x01, 0x0a, 0x10, 0x50, 0x61,
	0x72, 0x6b, 0x69, 0x6e, 0x67, 0x4c, 0x6f, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x4c, 0x6f, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4c,
	0x6f, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x4c, 0x6f, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4c, 0x6f, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x70, 0x61, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x70, 0x61, 0x63, 0x65, 0x73,
	0x12, 0x26, 0x0a, 0x0e, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x69, 0x65, 0x64, 0x53, 0x70, 0x61, 0x63,
	0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x69,
	0x65, 0x64, 0x53, 0x70, 0x61, 0x63, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x46, 0x72, 0x65, 0x65,
	0x53, 0x70, 0x61, 0x63, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x46, 0x72,
	0x65, 0x65, 0x53, 0x70, 0x61, 0x63, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x22, 0xd9, 0x01, 0x0a, 0x10, 0x50, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x4c, 0x6f,
	0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x4d, 0x69, 0x6e, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x53, 0x70, 0x63, 0x61, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0e, 0x4d, 0x69, 0x6e, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x70, 0x63, 0x61, 0x65, 0x73, 0x12,
	0x24, 0x0a, 0x0d, 0x4d, 0x69, 0x6e, 0x46, 0x72, 0x65, 0x65, 0x53, 0x70, 0x63, 0x61, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x4d, 0x69, 0x6e, 0x46, 0x72, 0x65, 0x65, 0x53,
	0x70, 0x63, 0x61, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x4d, 0x61, 0x78, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x53, 0x70, 0x63, 0x61, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x4d,
	0x61, 0x78, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x70, 0x63, 0x61, 0x65, 0x73, 0x12, 0x24, 0x0a,
	0x0d, 0x4d, 0x61, 0x78, 0x46, 0x72, 0x65, 0x65, 0x53, 0x70, 0x63, 0x61, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x4d, 0x61, 0x78, 0x46, 0x72, 0x65, 0x65, 0x53, 0x70, 0x63,
	0x61, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x2e,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x5e,
	0x0a, 0x0d, 0x50, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x4c, 0x6f, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x37, 0x0a, 0x0b, 0x50, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x4c, 0x6f, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x2e, 0x50, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x4c, 0x6f, 0x74, 0x52, 0x0b, 0x50, 0x61, 0x72,
	0x6b, 0x69, 0x6e, 0x67, 0x4c, 0x6f, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xdc,
	0x01, 0x0a, 0x0c, 0x50, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x70, 0x61, 0x63, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x53, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x53, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x6f, 0x74,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4c, 0x6f, 0x74, 0x49, 0x64, 0x12,
	0x22, 0x0a, 0x0c, 0x53, 0x70, 0x61, 0x63, 0x65, 0x73, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x53, 0x70, 0x61, 0x63, 0x65, 0x73, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x73, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x69, 0x65,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x49, 0x73, 0x4f, 0x63, 0x63, 0x75, 0x70,
	0x69, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x88, 0x01,
	0x0a, 0x12, 0x50, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x70, 0x61, 0x63, 0x65, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x53, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x4c, 0x6f, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4c,
	0x6f, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x70, 0x61, 0x63, 0x65, 0x73, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x53, 0x70, 0x61, 0x63,
	0x65, 0x73, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x73, 0x4f, 0x63,
	0x63, 0x75, 0x70, 0x69, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x49, 0x73,
	0x4f, 0x63, 0x63, 0x75, 0x70, 0x69, 0x65, 0x64, 0x22, 0x6e, 0x0a, 0x12, 0x50, 0x61, 0x72, 0x6b,
	0x69, 0x6e, 0x67, 0x53, 0x70, 0x61, 0x63, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x4c, 0x6f, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4c,
	0x6f, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x70, 0x61, 0x63, 0x65, 0x73, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x53, 0x70, 0x61, 0x63,
	0x65, 0x73, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x73, 0x4f, 0x63,
	0x63, 0x75, 0x70, 0x69, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x49, 0x73,
	0x4f, 0x63, 0x63, 0x75, 0x70, 0x69, 0x65, 0x64, 0x22, 0x99, 0x01, 0x0a, 0x12, 0x50, 0x61, 0x72,
	0x6b, 0x69, 0x6e, 0x67, 0x53, 0x70, 0x61, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0x14, 0x0a, 0x05, 0x4c, 0x6f, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x4c, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x70, 0x61, 0x63, 0x65, 0x73, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x53, 0x70, 0x61,
	0x63, 0x65, 0x73, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x73, 0x4f,
	0x63, 0x63, 0x75, 0x70, 0x69, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x49,
	0x73, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x69, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x06, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x22, 0x67, 0x0a, 0x10, 0x50, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x53,
	0x70, 0x61, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x0d, 0x70, 0x61, 0x72, 0x6b,
	0x69, 0x6e, 0x67, 0x53, 0x70, 0x61, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x6b,
	0x69, 0x6e, 0x67, 0x53, 0x70, 0x61, 0x63, 0x65, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x6b, 0x69, 0x6e,
	0x67, 0x53, 0x70, 0x61, 0x63, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xa6, 0x02,
	0x0a, 0x12, 0x50, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x52, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x50, 0x61,
	0x72, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x50, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x70, 0x61, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x69, 0x74, 0x69, 0x7a, 0x65, 0x6e, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x69, 0x74, 0x69, 0x7a, 0x65, 0x6e, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x16, 0x0a, 0x06,
	0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x54, 0x69,
	0x6d, 0x65, 0x54, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xac, 0x01, 0x0a, 0x18, 0x50, 0x61, 0x72, 0x6b, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x50, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x70,
	0x61, 0x63, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x50, 0x61, 0x72,
	0x6b, 0x69, 0x6e, 0x67, 0x53, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x43,
	0x69, 0x74, 0x69, 0x7a, 0x65, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x43, 0x69, 0x74, 0x69, 0x7a, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x69, 0x6d,
	0x65, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x69, 0x6d,
	0x65, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x12, 0x16, 0x0a,
	0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xd2, 0x01, 0x0a, 0x18, 0x50, 0x61, 0x72, 0x6b, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x52, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x50, 0x61, 0x72, 0x6b,
	0x69, 0x6e, 0x67, 0x53, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x50, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x43, 0x69, 0x74, 0x69, 0x7a, 0x65, 0x6e, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x69, 0x74, 0x69, 0x7a, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x69,
	0x6d, 0x65, 0x54, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x54, 0x69, 0x6d, 0x65,
	0x54, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xb7, 0x01, 0x0a, 0x18, 0x50,
	0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x50, 0x61, 0x72, 0x6b, 0x69,
	0x6e, 0x67, 0x53, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x50, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x43, 0x69, 0x74, 0x69, 0x7a, 0x65, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x43, 0x69, 0x74, 0x69, 0x7a, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x29, 0x0a, 0x06, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x22, 0x7f, 0x0a, 0x16, 0x50, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4f,
	0x0a, 0x13, 0x70, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x70, 0x61, 0x72, 0x6b,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x32, 0xf1, 0x08, 0x0a, 0x0e, 0x50, 0x61, 0x72, 0x6b, 0x69, 0x6e,
	0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4e, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x50, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x70, 0x63, 0x61, 0x65, 0x12, 0x1d,
	0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x6b, 0x69,
	0x6e, 0x67, 0x53, 0x70, 0x61, 0x63, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x1a, 0x17, 0x2e,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x6b, 0x69, 0x6e,
	0x67, 0x53, 0x70, 0x61, 0x63, 0x65, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x50,
	0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x70, 0x61, 0x63, 0x65, 0x12, 0x0f, 0x2e, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x42, 0x79, 0x49, 0x64, 0x1a, 0x17, 0x2e, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67,
	0x53, 0x70, 0x61, 0x63, 0x65, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x41, 0x6c,
	0x6c, 0x50, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x70, 0x61, 0x63, 0x65, 0x73, 0x12, 0x1d,
	0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x6b, 0x69,
	0x6e, 0x67, 0x53, 0x70, 0x61, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x1b, 0x2e,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x6b, 0x69, 0x6e,
	0x67, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x12,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x70, 0x61,
	0x63, 0x65, 0x12, 0x1d, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x50,
	0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x70, 0x61, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x1a, 0x17, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x50, 0x61,
	0x72, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x70, 0x61, 0x63, 0x65, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x12,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x70, 0x61,
	0x63, 0x65, 0x12, 0x0f, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x42,
	0x79, 0x49, 0x64, 0x1a, 0x0f, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x2e,
	0x56, 0x6f, 0x69, 0x64, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x50, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x4c, 0x6f, 0x74, 0x12, 0x1b, 0x2e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x4c, 0x6f,
	0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x1a, 0x15, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x4c, 0x6f, 0x74, 0x22, 0x00,
	0x12, 0x48, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x6b, 0x69, 0x6e,
	0x67, 0x4c, 0x6f, 0x74, 0x12, 0x1b, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x2e, 0x50, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x4c, 0x6f, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x1a, 0x15, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x50, 0x61,
	0x72, 0x6b, 0x69, 0x6e, 0x67, 0x4c, 0x6f, 0x74, 0x22, 0x00, 0x12, 0x36, 0x0a, 0x10, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x50, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x4c, 0x6f, 0x74, 0x12, 0x0f,
	0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x42, 0x79, 0x49, 0x64, 0x1a,
	0x0f, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x56, 0x6f, 0x69, 0x64,
	0x22, 0x00, 0x12, 0x4c, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x50, 0x61, 0x72, 0x6b,
	0x69, 0x6e, 0x67, 0x4c, 0x6f, 0x74, 0x73, 0x12, 0x1b, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x4c, 0x6f, 0x74, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x1a, 0x18, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x2e, 0x50, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x4c, 0x6f, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00,
	0x12, 0x3c, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x0f, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x2e, 0x42, 0x79, 0x49, 0x64, 0x1a, 0x15, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72,
	0x74, 0x2e, 0x50, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x4c, 0x6f, 0x74, 0x22, 0x00, 0x12, 0x56,
	0x0a, 0x0e, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x50, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67,
	0x12, 0x23, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x50, 0x61, 0x72,
	0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x1a, 0x1d, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72,
	0x74, 0x2e, 0x50, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x14, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x50, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x23,
	0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x6b, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x1a, 0x1d, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x2e,
	0x50, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x50, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x0f, 0x2e, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x42, 0x79, 0x49, 0x64, 0x1a, 0x1d, 0x2e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x14, 0x47,
	0x65, 0x74, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x50, 0x61, 0x72, 0x6b,
	0x69, 0x6e, 0x67, 0x12, 0x23, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x2e,
	0x50, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x21, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x70, 0x6f, 0x72, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x3a, 0x0a,
	0x14, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x50, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x0f, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72,
	0x74, 0x2e, 0x42, 0x79, 0x49, 0x64, 0x1a, 0x0f, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x22, 0x00, 0x42, 0x15, 0x5a, 0x13, 0x2f, 0x67, 0x65,
	0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_parking_proto_rawDescOnce sync.Once
	file_parking_proto_rawDescData = file_parking_proto_rawDesc
)

func file_parking_proto_rawDescGZIP() []byte {
	file_parking_proto_rawDescOnce.Do(func() {
		file_parking_proto_rawDescData = protoimpl.X.CompressGZIP(file_parking_proto_rawDescData)
	})
	return file_parking_proto_rawDescData
}

var file_parking_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_parking_proto_goTypes = []any{
	(*ParkingLot)(nil),               // 0: transport.ParkingLot
	(*ParkingLotCreate)(nil),         // 1: transport.ParkingLotCreate
	(*ParkingLotUpdate)(nil),         // 2: transport.ParkingLotUpdate
	(*ParkingLotFilter)(nil),         // 3: transport.ParkingLotFilter
	(*PakingLotList)(nil),            // 4: transport.PakingLotList
	(*ParkingSpace)(nil),             // 5: transport.ParkingSpace
	(*ParkingSpaceUpdate)(nil),       // 6: transport.ParkingSpaceUpdate
	(*ParkingSpaceCreate)(nil),       // 7: transport.ParkingSpaceCreate
	(*ParkingSpaceFilter)(nil),       // 8: transport.ParkingSpaceFilter
	(*ParkingSpaceList)(nil),         // 9: transport.ParkingSpaceList
	(*ParkingReservation)(nil),       // 10: transport.ParkingReservation
	(*ParkingReservationCreate)(nil), // 11: transport.ParkingReservationCreate
	(*ParkingReservationUpdate)(nil), // 12: transport.ParkingReservationUpdate
	(*ParkingReservationFilter)(nil), // 13: transport.ParkingReservationFilter
	(*ParkingReservationList)(nil),   // 14: transport.ParkingReservationList
	(*Filter)(nil),                   // 15: transport.Filter
	(*ById)(nil),                     // 16: transport.ById
	(*Void)(nil),                     // 17: transport.Void
}
var file_parking_proto_depIdxs = []int32{
	15, // 0: transport.ParkingLotFilter.filter:type_name -> transport.Filter
	0,  // 1: transport.PakingLotList.ParkingLots:type_name -> transport.ParkingLot
	15, // 2: transport.ParkingSpaceFilter.filter:type_name -> transport.Filter
	5,  // 3: transport.ParkingSpaceList.parkingSpaces:type_name -> transport.ParkingSpace
	15, // 4: transport.ParkingReservationFilter.filter:type_name -> transport.Filter
	10, // 5: transport.ParkingReservationList.parkingReservations:type_name -> transport.ParkingReservation
	7,  // 6: transport.ParkingService.CreateParkingSpcae:input_type -> transport.ParkingSpaceCreate
	16, // 7: transport.ParkingService.GetParkingSpace:input_type -> transport.ById
	8,  // 8: transport.ParkingService.GetAllParkingSpaces:input_type -> transport.ParkingSpaceFilter
	6,  // 9: transport.ParkingService.UpdateParkingSpace:input_type -> transport.ParkingSpaceUpdate
	16, // 10: transport.ParkingService.DeleteParkingSpace:input_type -> transport.ById
	1,  // 11: transport.ParkingService.CreateParkingLot:input_type -> transport.ParkingLotCreate
	2,  // 12: transport.ParkingService.UpdateParkingLot:input_type -> transport.ParkingLotUpdate
	16, // 13: transport.ParkingService.DeleteParkingLot:input_type -> transport.ById
	3,  // 14: transport.ParkingService.GetAllParkingLots:input_type -> transport.ParkingLotFilter
	16, // 15: transport.ParkingService.GetParkingStatus:input_type -> transport.ById
	11, // 16: transport.ParkingService.ReserveParking:input_type -> transport.ParkingReservationCreate
	12, // 17: transport.ParkingService.ReserveParkingUpdate:input_type -> transport.ParkingReservationUpdate
	16, // 18: transport.ParkingService.GetReserveParking:input_type -> transport.ById
	13, // 19: transport.ParkingService.GetAllReserveParking:input_type -> transport.ParkingReservationFilter
	16, // 20: transport.ParkingService.ReserveParkingDelete:input_type -> transport.ById
	5,  // 21: transport.ParkingService.CreateParkingSpcae:output_type -> transport.ParkingSpace
	5,  // 22: transport.ParkingService.GetParkingSpace:output_type -> transport.ParkingSpace
	9,  // 23: transport.ParkingService.GetAllParkingSpaces:output_type -> transport.ParkingSpaceList
	5,  // 24: transport.ParkingService.UpdateParkingSpace:output_type -> transport.ParkingSpace
	17, // 25: transport.ParkingService.DeleteParkingSpace:output_type -> transport.Void
	0,  // 26: transport.ParkingService.CreateParkingLot:output_type -> transport.ParkingLot
	0,  // 27: transport.ParkingService.UpdateParkingLot:output_type -> transport.ParkingLot
	17, // 28: transport.ParkingService.DeleteParkingLot:output_type -> transport.Void
	4,  // 29: transport.ParkingService.GetAllParkingLots:output_type -> transport.PakingLotList
	0,  // 30: transport.ParkingService.GetParkingStatus:output_type -> transport.ParkingLot
	10, // 31: transport.ParkingService.ReserveParking:output_type -> transport.ParkingReservation
	10, // 32: transport.ParkingService.ReserveParkingUpdate:output_type -> transport.ParkingReservation
	10, // 33: transport.ParkingService.GetReserveParking:output_type -> transport.ParkingReservation
	14, // 34: transport.ParkingService.GetAllReserveParking:output_type -> transport.ParkingReservationList
	17, // 35: transport.ParkingService.ReserveParkingDelete:output_type -> transport.Void
	21, // [21:36] is the sub-list for method output_type
	6,  // [6:21] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_parking_proto_init() }
func file_parking_proto_init() {
	if File_parking_proto != nil {
		return
	}
	file_common7_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_parking_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*ParkingLot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_parking_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*ParkingLotCreate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_parking_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*ParkingLotUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_parking_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*ParkingLotFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_parking_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*PakingLotList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_parking_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*ParkingSpace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_parking_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*ParkingSpaceUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_parking_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*ParkingSpaceCreate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_parking_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*ParkingSpaceFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_parking_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*ParkingSpaceList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_parking_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*ParkingReservation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_parking_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*ParkingReservationCreate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_parking_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*ParkingReservationUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_parking_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*ParkingReservationFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_parking_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*ParkingReservationList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_parking_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_parking_proto_goTypes,
		DependencyIndexes: file_parking_proto_depIdxs,
		MessageInfos:      file_parking_proto_msgTypes,
	}.Build()
	File_parking_proto = out.File
	file_parking_proto_rawDesc = nil
	file_parking_proto_goTypes = nil
	file_parking_proto_depIdxs = nil
}
