// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.12.4
// source: parking.proto

package transport

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	ParkingService_CreateParkingSpcae_FullMethodName   = "/transport.ParkingService/CreateParkingSpcae"
	ParkingService_GetParkingSpace_FullMethodName      = "/transport.ParkingService/GetParkingSpace"
	ParkingService_GetAllParkingSpaces_FullMethodName  = "/transport.ParkingService/GetAllParkingSpaces"
	ParkingService_UpdateParkingSpace_FullMethodName   = "/transport.ParkingService/UpdateParkingSpace"
	ParkingService_DeleteParkingSpace_FullMethodName   = "/transport.ParkingService/DeleteParkingSpace"
	ParkingService_CreateParkingLot_FullMethodName     = "/transport.ParkingService/CreateParkingLot"
	ParkingService_UpdateParkingLot_FullMethodName     = "/transport.ParkingService/UpdateParkingLot"
	ParkingService_DeleteParkingLot_FullMethodName     = "/transport.ParkingService/DeleteParkingLot"
	ParkingService_GetAllParkingLots_FullMethodName    = "/transport.ParkingService/GetAllParkingLots"
	ParkingService_GetParkingStatus_FullMethodName     = "/transport.ParkingService/GetParkingStatus"
	ParkingService_ReserveParking_FullMethodName       = "/transport.ParkingService/ReserveParking"
	ParkingService_ReserveParkingUpdate_FullMethodName = "/transport.ParkingService/ReserveParkingUpdate"
	ParkingService_GetReserveParking_FullMethodName    = "/transport.ParkingService/GetReserveParking"
	ParkingService_GetAllReserveParking_FullMethodName = "/transport.ParkingService/GetAllReserveParking"
	ParkingService_ReserveParkingDelete_FullMethodName = "/transport.ParkingService/ReserveParkingDelete"
)

// ParkingServiceClient is the client API for ParkingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ParkingServiceClient interface {
	CreateParkingSpcae(ctx context.Context, in *ParkingSpaceCreate, opts ...grpc.CallOption) (*ParkingSpace, error)
	GetParkingSpace(ctx context.Context, in *ById, opts ...grpc.CallOption) (*ParkingSpace, error)
	GetAllParkingSpaces(ctx context.Context, in *ParkingSpaceFilter, opts ...grpc.CallOption) (*ParkingSpaceList, error)
	UpdateParkingSpace(ctx context.Context, in *ParkingSpaceUpdate, opts ...grpc.CallOption) (*ParkingSpace, error)
	DeleteParkingSpace(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Void, error)
	CreateParkingLot(ctx context.Context, in *ParkingLotCreate, opts ...grpc.CallOption) (*ParkingLot, error)
	UpdateParkingLot(ctx context.Context, in *ParkingLotUpdate, opts ...grpc.CallOption) (*ParkingLot, error)
	DeleteParkingLot(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Void, error)
	GetAllParkingLots(ctx context.Context, in *ParkingLotFilter, opts ...grpc.CallOption) (*PakingLotList, error)
	GetParkingStatus(ctx context.Context, in *ById, opts ...grpc.CallOption) (*ParkingLot, error)
	ReserveParking(ctx context.Context, in *ParkingReservationCreate, opts ...grpc.CallOption) (*ParkingReservation, error)
	ReserveParkingUpdate(ctx context.Context, in *ParkingReservationUpdate, opts ...grpc.CallOption) (*ParkingReservation, error)
	GetReserveParking(ctx context.Context, in *ById, opts ...grpc.CallOption) (*ParkingReservation, error)
	GetAllReserveParking(ctx context.Context, in *ParkingReservationFilter, opts ...grpc.CallOption) (*ParkingReservationList, error)
	ReserveParkingDelete(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Void, error)
}

type parkingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewParkingServiceClient(cc grpc.ClientConnInterface) ParkingServiceClient {
	return &parkingServiceClient{cc}
}

func (c *parkingServiceClient) CreateParkingSpcae(ctx context.Context, in *ParkingSpaceCreate, opts ...grpc.CallOption) (*ParkingSpace, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ParkingSpace)
	err := c.cc.Invoke(ctx, ParkingService_CreateParkingSpcae_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parkingServiceClient) GetParkingSpace(ctx context.Context, in *ById, opts ...grpc.CallOption) (*ParkingSpace, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ParkingSpace)
	err := c.cc.Invoke(ctx, ParkingService_GetParkingSpace_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parkingServiceClient) GetAllParkingSpaces(ctx context.Context, in *ParkingSpaceFilter, opts ...grpc.CallOption) (*ParkingSpaceList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ParkingSpaceList)
	err := c.cc.Invoke(ctx, ParkingService_GetAllParkingSpaces_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parkingServiceClient) UpdateParkingSpace(ctx context.Context, in *ParkingSpaceUpdate, opts ...grpc.CallOption) (*ParkingSpace, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ParkingSpace)
	err := c.cc.Invoke(ctx, ParkingService_UpdateParkingSpace_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parkingServiceClient) DeleteParkingSpace(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Void, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Void)
	err := c.cc.Invoke(ctx, ParkingService_DeleteParkingSpace_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parkingServiceClient) CreateParkingLot(ctx context.Context, in *ParkingLotCreate, opts ...grpc.CallOption) (*ParkingLot, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ParkingLot)
	err := c.cc.Invoke(ctx, ParkingService_CreateParkingLot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parkingServiceClient) UpdateParkingLot(ctx context.Context, in *ParkingLotUpdate, opts ...grpc.CallOption) (*ParkingLot, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ParkingLot)
	err := c.cc.Invoke(ctx, ParkingService_UpdateParkingLot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parkingServiceClient) DeleteParkingLot(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Void, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Void)
	err := c.cc.Invoke(ctx, ParkingService_DeleteParkingLot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parkingServiceClient) GetAllParkingLots(ctx context.Context, in *ParkingLotFilter, opts ...grpc.CallOption) (*PakingLotList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PakingLotList)
	err := c.cc.Invoke(ctx, ParkingService_GetAllParkingLots_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parkingServiceClient) GetParkingStatus(ctx context.Context, in *ById, opts ...grpc.CallOption) (*ParkingLot, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ParkingLot)
	err := c.cc.Invoke(ctx, ParkingService_GetParkingStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parkingServiceClient) ReserveParking(ctx context.Context, in *ParkingReservationCreate, opts ...grpc.CallOption) (*ParkingReservation, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ParkingReservation)
	err := c.cc.Invoke(ctx, ParkingService_ReserveParking_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parkingServiceClient) ReserveParkingUpdate(ctx context.Context, in *ParkingReservationUpdate, opts ...grpc.CallOption) (*ParkingReservation, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ParkingReservation)
	err := c.cc.Invoke(ctx, ParkingService_ReserveParkingUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parkingServiceClient) GetReserveParking(ctx context.Context, in *ById, opts ...grpc.CallOption) (*ParkingReservation, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ParkingReservation)
	err := c.cc.Invoke(ctx, ParkingService_GetReserveParking_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parkingServiceClient) GetAllReserveParking(ctx context.Context, in *ParkingReservationFilter, opts ...grpc.CallOption) (*ParkingReservationList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ParkingReservationList)
	err := c.cc.Invoke(ctx, ParkingService_GetAllReserveParking_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parkingServiceClient) ReserveParkingDelete(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Void, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Void)
	err := c.cc.Invoke(ctx, ParkingService_ReserveParkingDelete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ParkingServiceServer is the server API for ParkingService service.
// All implementations must embed UnimplementedParkingServiceServer
// for forward compatibility
type ParkingServiceServer interface {
	CreateParkingSpcae(context.Context, *ParkingSpaceCreate) (*ParkingSpace, error)
	GetParkingSpace(context.Context, *ById) (*ParkingSpace, error)
	GetAllParkingSpaces(context.Context, *ParkingSpaceFilter) (*ParkingSpaceList, error)
	UpdateParkingSpace(context.Context, *ParkingSpaceUpdate) (*ParkingSpace, error)
	DeleteParkingSpace(context.Context, *ById) (*Void, error)
	CreateParkingLot(context.Context, *ParkingLotCreate) (*ParkingLot, error)
	UpdateParkingLot(context.Context, *ParkingLotUpdate) (*ParkingLot, error)
	DeleteParkingLot(context.Context, *ById) (*Void, error)
	GetAllParkingLots(context.Context, *ParkingLotFilter) (*PakingLotList, error)
	GetParkingStatus(context.Context, *ById) (*ParkingLot, error)
	ReserveParking(context.Context, *ParkingReservationCreate) (*ParkingReservation, error)
	ReserveParkingUpdate(context.Context, *ParkingReservationUpdate) (*ParkingReservation, error)
	GetReserveParking(context.Context, *ById) (*ParkingReservation, error)
	GetAllReserveParking(context.Context, *ParkingReservationFilter) (*ParkingReservationList, error)
	ReserveParkingDelete(context.Context, *ById) (*Void, error)
	mustEmbedUnimplementedParkingServiceServer()
}

// UnimplementedParkingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedParkingServiceServer struct {
}

func (UnimplementedParkingServiceServer) CreateParkingSpcae(context.Context, *ParkingSpaceCreate) (*ParkingSpace, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateParkingSpcae not implemented")
}
func (UnimplementedParkingServiceServer) GetParkingSpace(context.Context, *ById) (*ParkingSpace, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetParkingSpace not implemented")
}
func (UnimplementedParkingServiceServer) GetAllParkingSpaces(context.Context, *ParkingSpaceFilter) (*ParkingSpaceList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllParkingSpaces not implemented")
}
func (UnimplementedParkingServiceServer) UpdateParkingSpace(context.Context, *ParkingSpaceUpdate) (*ParkingSpace, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParkingSpace not implemented")
}
func (UnimplementedParkingServiceServer) DeleteParkingSpace(context.Context, *ById) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteParkingSpace not implemented")
}
func (UnimplementedParkingServiceServer) CreateParkingLot(context.Context, *ParkingLotCreate) (*ParkingLot, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateParkingLot not implemented")
}
func (UnimplementedParkingServiceServer) UpdateParkingLot(context.Context, *ParkingLotUpdate) (*ParkingLot, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParkingLot not implemented")
}
func (UnimplementedParkingServiceServer) DeleteParkingLot(context.Context, *ById) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteParkingLot not implemented")
}
func (UnimplementedParkingServiceServer) GetAllParkingLots(context.Context, *ParkingLotFilter) (*PakingLotList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllParkingLots not implemented")
}
func (UnimplementedParkingServiceServer) GetParkingStatus(context.Context, *ById) (*ParkingLot, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetParkingStatus not implemented")
}
func (UnimplementedParkingServiceServer) ReserveParking(context.Context, *ParkingReservationCreate) (*ParkingReservation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReserveParking not implemented")
}
func (UnimplementedParkingServiceServer) ReserveParkingUpdate(context.Context, *ParkingReservationUpdate) (*ParkingReservation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReserveParkingUpdate not implemented")
}
func (UnimplementedParkingServiceServer) GetReserveParking(context.Context, *ById) (*ParkingReservation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReserveParking not implemented")
}
func (UnimplementedParkingServiceServer) GetAllReserveParking(context.Context, *ParkingReservationFilter) (*ParkingReservationList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllReserveParking not implemented")
}
func (UnimplementedParkingServiceServer) ReserveParkingDelete(context.Context, *ById) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReserveParkingDelete not implemented")
}
func (UnimplementedParkingServiceServer) mustEmbedUnimplementedParkingServiceServer() {}

// UnsafeParkingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ParkingServiceServer will
// result in compilation errors.
type UnsafeParkingServiceServer interface {
	mustEmbedUnimplementedParkingServiceServer()
}

func RegisterParkingServiceServer(s grpc.ServiceRegistrar, srv ParkingServiceServer) {
	s.RegisterService(&ParkingService_ServiceDesc, srv)
}

func _ParkingService_CreateParkingSpcae_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParkingSpaceCreate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParkingServiceServer).CreateParkingSpcae(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ParkingService_CreateParkingSpcae_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParkingServiceServer).CreateParkingSpcae(ctx, req.(*ParkingSpaceCreate))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParkingService_GetParkingSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParkingServiceServer).GetParkingSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ParkingService_GetParkingSpace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParkingServiceServer).GetParkingSpace(ctx, req.(*ById))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParkingService_GetAllParkingSpaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParkingSpaceFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParkingServiceServer).GetAllParkingSpaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ParkingService_GetAllParkingSpaces_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParkingServiceServer).GetAllParkingSpaces(ctx, req.(*ParkingSpaceFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParkingService_UpdateParkingSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParkingSpaceUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParkingServiceServer).UpdateParkingSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ParkingService_UpdateParkingSpace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParkingServiceServer).UpdateParkingSpace(ctx, req.(*ParkingSpaceUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParkingService_DeleteParkingSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParkingServiceServer).DeleteParkingSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ParkingService_DeleteParkingSpace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParkingServiceServer).DeleteParkingSpace(ctx, req.(*ById))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParkingService_CreateParkingLot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParkingLotCreate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParkingServiceServer).CreateParkingLot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ParkingService_CreateParkingLot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParkingServiceServer).CreateParkingLot(ctx, req.(*ParkingLotCreate))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParkingService_UpdateParkingLot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParkingLotUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParkingServiceServer).UpdateParkingLot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ParkingService_UpdateParkingLot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParkingServiceServer).UpdateParkingLot(ctx, req.(*ParkingLotUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParkingService_DeleteParkingLot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParkingServiceServer).DeleteParkingLot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ParkingService_DeleteParkingLot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParkingServiceServer).DeleteParkingLot(ctx, req.(*ById))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParkingService_GetAllParkingLots_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParkingLotFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParkingServiceServer).GetAllParkingLots(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ParkingService_GetAllParkingLots_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParkingServiceServer).GetAllParkingLots(ctx, req.(*ParkingLotFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParkingService_GetParkingStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParkingServiceServer).GetParkingStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ParkingService_GetParkingStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParkingServiceServer).GetParkingStatus(ctx, req.(*ById))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParkingService_ReserveParking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParkingReservationCreate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParkingServiceServer).ReserveParking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ParkingService_ReserveParking_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParkingServiceServer).ReserveParking(ctx, req.(*ParkingReservationCreate))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParkingService_ReserveParkingUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParkingReservationUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParkingServiceServer).ReserveParkingUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ParkingService_ReserveParkingUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParkingServiceServer).ReserveParkingUpdate(ctx, req.(*ParkingReservationUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParkingService_GetReserveParking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParkingServiceServer).GetReserveParking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ParkingService_GetReserveParking_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParkingServiceServer).GetReserveParking(ctx, req.(*ById))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParkingService_GetAllReserveParking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParkingReservationFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParkingServiceServer).GetAllReserveParking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ParkingService_GetAllReserveParking_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParkingServiceServer).GetAllReserveParking(ctx, req.(*ParkingReservationFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParkingService_ReserveParkingDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParkingServiceServer).ReserveParkingDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ParkingService_ReserveParkingDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParkingServiceServer).ReserveParkingDelete(ctx, req.(*ById))
	}
	return interceptor(ctx, in, info, handler)
}

// ParkingService_ServiceDesc is the grpc.ServiceDesc for ParkingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ParkingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "transport.ParkingService",
	HandlerType: (*ParkingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateParkingSpcae",
			Handler:    _ParkingService_CreateParkingSpcae_Handler,
		},
		{
			MethodName: "GetParkingSpace",
			Handler:    _ParkingService_GetParkingSpace_Handler,
		},
		{
			MethodName: "GetAllParkingSpaces",
			Handler:    _ParkingService_GetAllParkingSpaces_Handler,
		},
		{
			MethodName: "UpdateParkingSpace",
			Handler:    _ParkingService_UpdateParkingSpace_Handler,
		},
		{
			MethodName: "DeleteParkingSpace",
			Handler:    _ParkingService_DeleteParkingSpace_Handler,
		},
		{
			MethodName: "CreateParkingLot",
			Handler:    _ParkingService_CreateParkingLot_Handler,
		},
		{
			MethodName: "UpdateParkingLot",
			Handler:    _ParkingService_UpdateParkingLot_Handler,
		},
		{
			MethodName: "DeleteParkingLot",
			Handler:    _ParkingService_DeleteParkingLot_Handler,
		},
		{
			MethodName: "GetAllParkingLots",
			Handler:    _ParkingService_GetAllParkingLots_Handler,
		},
		{
			MethodName: "GetParkingStatus",
			Handler:    _ParkingService_GetParkingStatus_Handler,
		},
		{
			MethodName: "ReserveParking",
			Handler:    _ParkingService_ReserveParking_Handler,
		},
		{
			MethodName: "ReserveParkingUpdate",
			Handler:    _ParkingService_ReserveParkingUpdate_Handler,
		},
		{
			MethodName: "GetReserveParking",
			Handler:    _ParkingService_GetReserveParking_Handler,
		},
		{
			MethodName: "GetAllReserveParking",
			Handler:    _ParkingService_GetAllReserveParking_Handler,
		},
		{
			MethodName: "ReserveParkingDelete",
			Handler:    _ParkingService_ReserveParkingDelete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "parking.proto",
}
