// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: document.proto

package citizen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CitizenDocumentService_UploadDocument_FullMethodName      = "/citizen.CitizenDocumentService/UploadDocument"
	CitizenDocumentService_GetCitizenDocuments_FullMethodName = "/citizen.CitizenDocumentService/GetCitizenDocuments"
)

// CitizenDocumentServiceClient is the client API for CitizenDocumentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CitizenDocumentServiceClient interface {
	UploadDocument(ctx context.Context, in *DocumentCreate, opts ...grpc.CallOption) (*Document, error)
	GetCitizenDocuments(ctx context.Context, in *ById, opts ...grpc.CallOption) (*DocumentList, error)
}

type citizenDocumentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCitizenDocumentServiceClient(cc grpc.ClientConnInterface) CitizenDocumentServiceClient {
	return &citizenDocumentServiceClient{cc}
}

func (c *citizenDocumentServiceClient) UploadDocument(ctx context.Context, in *DocumentCreate, opts ...grpc.CallOption) (*Document, error) {
	out := new(Document)
	err := c.cc.Invoke(ctx, CitizenDocumentService_UploadDocument_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *citizenDocumentServiceClient) GetCitizenDocuments(ctx context.Context, in *ById, opts ...grpc.CallOption) (*DocumentList, error) {
	out := new(DocumentList)
	err := c.cc.Invoke(ctx, CitizenDocumentService_GetCitizenDocuments_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CitizenDocumentServiceServer is the server API for CitizenDocumentService service.
// All implementations must embed UnimplementedCitizenDocumentServiceServer
// for forward compatibility
type CitizenDocumentServiceServer interface {
	UploadDocument(context.Context, *DocumentCreate) (*Document, error)
	GetCitizenDocuments(context.Context, *ById) (*DocumentList, error)
	mustEmbedUnimplementedCitizenDocumentServiceServer()
}

// UnimplementedCitizenDocumentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCitizenDocumentServiceServer struct {
}

func (UnimplementedCitizenDocumentServiceServer) UploadDocument(context.Context, *DocumentCreate) (*Document, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadDocument not implemented")
}
func (UnimplementedCitizenDocumentServiceServer) GetCitizenDocuments(context.Context, *ById) (*DocumentList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCitizenDocuments not implemented")
}
func (UnimplementedCitizenDocumentServiceServer) mustEmbedUnimplementedCitizenDocumentServiceServer() {
}

// UnsafeCitizenDocumentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CitizenDocumentServiceServer will
// result in compilation errors.
type UnsafeCitizenDocumentServiceServer interface {
	mustEmbedUnimplementedCitizenDocumentServiceServer()
}

func RegisterCitizenDocumentServiceServer(s grpc.ServiceRegistrar, srv CitizenDocumentServiceServer) {
	s.RegisterService(&CitizenDocumentService_ServiceDesc, srv)
}

func _CitizenDocumentService_UploadDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DocumentCreate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CitizenDocumentServiceServer).UploadDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CitizenDocumentService_UploadDocument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CitizenDocumentServiceServer).UploadDocument(ctx, req.(*DocumentCreate))
	}
	return interceptor(ctx, in, info, handler)
}

func _CitizenDocumentService_GetCitizenDocuments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CitizenDocumentServiceServer).GetCitizenDocuments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CitizenDocumentService_GetCitizenDocuments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CitizenDocumentServiceServer).GetCitizenDocuments(ctx, req.(*ById))
	}
	return interceptor(ctx, in, info, handler)
}

// CitizenDocumentService_ServiceDesc is the grpc.ServiceDesc for CitizenDocumentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CitizenDocumentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "citizen.CitizenDocumentService",
	HandlerType: (*CitizenDocumentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UploadDocument",
			Handler:    _CitizenDocumentService_UploadDocument_Handler,
		},
		{
			MethodName: "GetCitizenDocuments",
			Handler:    _CitizenDocumentService_GetCitizenDocuments_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "document.proto",
}
