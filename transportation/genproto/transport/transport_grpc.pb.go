// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: transport.proto

package transport

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TransportSevice_GetLocationOfTrasnport_FullMethodName = "/transport.TransportSevice/GetLocationOfTrasnport"
	TransportSevice_CreateVehicle_FullMethodName          = "/transport.TransportSevice/CreateVehicle"
	TransportSevice_UpdateVehicle_FullMethodName          = "/transport.TransportSevice/UpdateVehicle"
	TransportSevice_DeleteVehicle_FullMethodName          = "/transport.TransportSevice/DeleteVehicle"
)

// TransportSeviceClient is the client API for TransportSevice service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransportSeviceClient interface {
	GetLocationOfTrasnport(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Location, error)
	CreateVehicle(ctx context.Context, in *VehicleCreate, opts ...grpc.CallOption) (*Vehicle, error)
	UpdateVehicle(ctx context.Context, in *VehicleUpdate, opts ...grpc.CallOption) (*Vehicle, error)
	DeleteVehicle(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Void, error)
}

type transportSeviceClient struct {
	cc grpc.ClientConnInterface
}

func NewTransportSeviceClient(cc grpc.ClientConnInterface) TransportSeviceClient {
	return &transportSeviceClient{cc}
}

func (c *transportSeviceClient) GetLocationOfTrasnport(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Location, error) {
	out := new(Location)
	err := c.cc.Invoke(ctx, TransportSevice_GetLocationOfTrasnport_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transportSeviceClient) CreateVehicle(ctx context.Context, in *VehicleCreate, opts ...grpc.CallOption) (*Vehicle, error) {
	out := new(Vehicle)
	err := c.cc.Invoke(ctx, TransportSevice_CreateVehicle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transportSeviceClient) UpdateVehicle(ctx context.Context, in *VehicleUpdate, opts ...grpc.CallOption) (*Vehicle, error) {
	out := new(Vehicle)
	err := c.cc.Invoke(ctx, TransportSevice_UpdateVehicle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transportSeviceClient) DeleteVehicle(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, TransportSevice_DeleteVehicle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransportSeviceServer is the server API for TransportSevice service.
// All implementations must embed UnimplementedTransportSeviceServer
// for forward compatibility
type TransportSeviceServer interface {
	GetLocationOfTrasnport(context.Context, *ById) (*Location, error)
	CreateVehicle(context.Context, *VehicleCreate) (*Vehicle, error)
	UpdateVehicle(context.Context, *VehicleUpdate) (*Vehicle, error)
	DeleteVehicle(context.Context, *ById) (*Void, error)
	mustEmbedUnimplementedTransportSeviceServer()
}

// UnimplementedTransportSeviceServer must be embedded to have forward compatible implementations.
type UnimplementedTransportSeviceServer struct {
}

func (UnimplementedTransportSeviceServer) GetLocationOfTrasnport(context.Context, *ById) (*Location, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLocationOfTrasnport not implemented")
}
func (UnimplementedTransportSeviceServer) CreateVehicle(context.Context, *VehicleCreate) (*Vehicle, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVehicle not implemented")
}
func (UnimplementedTransportSeviceServer) UpdateVehicle(context.Context, *VehicleUpdate) (*Vehicle, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVehicle not implemented")
}
func (UnimplementedTransportSeviceServer) DeleteVehicle(context.Context, *ById) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVehicle not implemented")
}
func (UnimplementedTransportSeviceServer) mustEmbedUnimplementedTransportSeviceServer() {}

// UnsafeTransportSeviceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransportSeviceServer will
// result in compilation errors.
type UnsafeTransportSeviceServer interface {
	mustEmbedUnimplementedTransportSeviceServer()
}

func RegisterTransportSeviceServer(s grpc.ServiceRegistrar, srv TransportSeviceServer) {
	s.RegisterService(&TransportSevice_ServiceDesc, srv)
}

func _TransportSevice_GetLocationOfTrasnport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransportSeviceServer).GetLocationOfTrasnport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransportSevice_GetLocationOfTrasnport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransportSeviceServer).GetLocationOfTrasnport(ctx, req.(*ById))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransportSevice_CreateVehicle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VehicleCreate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransportSeviceServer).CreateVehicle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransportSevice_CreateVehicle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransportSeviceServer).CreateVehicle(ctx, req.(*VehicleCreate))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransportSevice_UpdateVehicle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VehicleUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransportSeviceServer).UpdateVehicle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransportSevice_UpdateVehicle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransportSeviceServer).UpdateVehicle(ctx, req.(*VehicleUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransportSevice_DeleteVehicle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransportSeviceServer).DeleteVehicle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransportSevice_DeleteVehicle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransportSeviceServer).DeleteVehicle(ctx, req.(*ById))
	}
	return interceptor(ctx, in, info, handler)
}

// TransportSevice_ServiceDesc is the grpc.ServiceDesc for TransportSevice service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TransportSevice_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "transport.TransportSevice",
	HandlerType: (*TransportSeviceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLocationOfTrasnport",
			Handler:    _TransportSevice_GetLocationOfTrasnport_Handler,
		},
		{
			MethodName: "CreateVehicle",
			Handler:    _TransportSevice_CreateVehicle_Handler,
		},
		{
			MethodName: "UpdateVehicle",
			Handler:    _TransportSevice_UpdateVehicle_Handler,
		},
		{
			MethodName: "DeleteVehicle",
			Handler:    _TransportSevice_DeleteVehicle_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "transport.proto",
}
