// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: maintance.proto

package transport

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MaintanceService_CreateMaintranceSchedule_FullMethodName = "/transport.MaintanceService/CreateMaintranceSchedule"
	MaintanceService_UpdateMaintranceSchedule_FullMethodName = "/transport.MaintanceService/UpdateMaintranceSchedule"
	MaintanceService_DeleteMaintranceSchedule_FullMethodName = "/transport.MaintanceService/DeleteMaintranceSchedule"
	MaintanceService_GetAllMaintanceSchedules_FullMethodName = "/transport.MaintanceService/GetAllMaintanceSchedules"
)

// MaintanceServiceClient is the client API for MaintanceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MaintanceServiceClient interface {
	CreateMaintranceSchedule(ctx context.Context, in *MaintanceScheduleCreate, opts ...grpc.CallOption) (*MaintanceScheduleRes, error)
	UpdateMaintranceSchedule(ctx context.Context, in *MaintanceScheduleUpdate, opts ...grpc.CallOption) (*MaintanceScheduleRes, error)
	DeleteMaintranceSchedule(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Void, error)
	GetAllMaintanceSchedules(ctx context.Context, in *MaintanceScheduleFilter, opts ...grpc.CallOption) (*MaintanceScheduleList, error)
}

type maintanceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMaintanceServiceClient(cc grpc.ClientConnInterface) MaintanceServiceClient {
	return &maintanceServiceClient{cc}
}

func (c *maintanceServiceClient) CreateMaintranceSchedule(ctx context.Context, in *MaintanceScheduleCreate, opts ...grpc.CallOption) (*MaintanceScheduleRes, error) {
	out := new(MaintanceScheduleRes)
	err := c.cc.Invoke(ctx, MaintanceService_CreateMaintranceSchedule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maintanceServiceClient) UpdateMaintranceSchedule(ctx context.Context, in *MaintanceScheduleUpdate, opts ...grpc.CallOption) (*MaintanceScheduleRes, error) {
	out := new(MaintanceScheduleRes)
	err := c.cc.Invoke(ctx, MaintanceService_UpdateMaintranceSchedule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maintanceServiceClient) DeleteMaintranceSchedule(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, MaintanceService_DeleteMaintranceSchedule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maintanceServiceClient) GetAllMaintanceSchedules(ctx context.Context, in *MaintanceScheduleFilter, opts ...grpc.CallOption) (*MaintanceScheduleList, error) {
	out := new(MaintanceScheduleList)
	err := c.cc.Invoke(ctx, MaintanceService_GetAllMaintanceSchedules_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MaintanceServiceServer is the server API for MaintanceService service.
// All implementations must embed UnimplementedMaintanceServiceServer
// for forward compatibility
type MaintanceServiceServer interface {
	CreateMaintranceSchedule(context.Context, *MaintanceScheduleCreate) (*MaintanceScheduleRes, error)
	UpdateMaintranceSchedule(context.Context, *MaintanceScheduleUpdate) (*MaintanceScheduleRes, error)
	DeleteMaintranceSchedule(context.Context, *ById) (*Void, error)
	GetAllMaintanceSchedules(context.Context, *MaintanceScheduleFilter) (*MaintanceScheduleList, error)
	mustEmbedUnimplementedMaintanceServiceServer()
}

// UnimplementedMaintanceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMaintanceServiceServer struct {
}

func (UnimplementedMaintanceServiceServer) CreateMaintranceSchedule(context.Context, *MaintanceScheduleCreate) (*MaintanceScheduleRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMaintranceSchedule not implemented")
}
func (UnimplementedMaintanceServiceServer) UpdateMaintranceSchedule(context.Context, *MaintanceScheduleUpdate) (*MaintanceScheduleRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMaintranceSchedule not implemented")
}
func (UnimplementedMaintanceServiceServer) DeleteMaintranceSchedule(context.Context, *ById) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMaintranceSchedule not implemented")
}
func (UnimplementedMaintanceServiceServer) GetAllMaintanceSchedules(context.Context, *MaintanceScheduleFilter) (*MaintanceScheduleList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllMaintanceSchedules not implemented")
}
func (UnimplementedMaintanceServiceServer) mustEmbedUnimplementedMaintanceServiceServer() {}

// UnsafeMaintanceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MaintanceServiceServer will
// result in compilation errors.
type UnsafeMaintanceServiceServer interface {
	mustEmbedUnimplementedMaintanceServiceServer()
}

func RegisterMaintanceServiceServer(s grpc.ServiceRegistrar, srv MaintanceServiceServer) {
	s.RegisterService(&MaintanceService_ServiceDesc, srv)
}

func _MaintanceService_CreateMaintranceSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MaintanceScheduleCreate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaintanceServiceServer).CreateMaintranceSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaintanceService_CreateMaintranceSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaintanceServiceServer).CreateMaintranceSchedule(ctx, req.(*MaintanceScheduleCreate))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaintanceService_UpdateMaintranceSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MaintanceScheduleUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaintanceServiceServer).UpdateMaintranceSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaintanceService_UpdateMaintranceSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaintanceServiceServer).UpdateMaintranceSchedule(ctx, req.(*MaintanceScheduleUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaintanceService_DeleteMaintranceSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaintanceServiceServer).DeleteMaintranceSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaintanceService_DeleteMaintranceSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaintanceServiceServer).DeleteMaintranceSchedule(ctx, req.(*ById))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaintanceService_GetAllMaintanceSchedules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MaintanceScheduleFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaintanceServiceServer).GetAllMaintanceSchedules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaintanceService_GetAllMaintanceSchedules_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaintanceServiceServer).GetAllMaintanceSchedules(ctx, req.(*MaintanceScheduleFilter))
	}
	return interceptor(ctx, in, info, handler)
}

// MaintanceService_ServiceDesc is the grpc.ServiceDesc for MaintanceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MaintanceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "transport.MaintanceService",
	HandlerType: (*MaintanceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMaintranceSchedule",
			Handler:    _MaintanceService_CreateMaintranceSchedule_Handler,
		},
		{
			MethodName: "UpdateMaintranceSchedule",
			Handler:    _MaintanceService_UpdateMaintranceSchedule_Handler,
		},
		{
			MethodName: "DeleteMaintranceSchedule",
			Handler:    _MaintanceService_DeleteMaintranceSchedule_Handler,
		},
		{
			MethodName: "GetAllMaintanceSchedules",
			Handler:    _MaintanceService_GetAllMaintanceSchedules_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "maintance.proto",
}
