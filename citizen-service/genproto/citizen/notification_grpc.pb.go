// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.12.4
// source: city_submodule/citizen/notification.proto

package citizen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	CitizenNotificationService_SetNotificationPref_FullMethodName    = "/citizen.CitizenNotificationService/SetNotificationPref"
	CitizenNotificationService_UpdateNotificationPref_FullMethodName = "/citizen.CitizenNotificationService/UpdateNotificationPref"
	CitizenNotificationService_DeleteNotificationPref_FullMethodName = "/citizen.CitizenNotificationService/DeleteNotificationPref"
)

// CitizenNotificationServiceClient is the client API for CitizenNotificationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CitizenNotificationServiceClient interface {
	SetNotificationPref(ctx context.Context, in *NotificationPref, opts ...grpc.CallOption) (*Void, error)
	UpdateNotificationPref(ctx context.Context, in *NotificationPref, opts ...grpc.CallOption) (*Void, error)
	DeleteNotificationPref(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Void, error)
}

type citizenNotificationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCitizenNotificationServiceClient(cc grpc.ClientConnInterface) CitizenNotificationServiceClient {
	return &citizenNotificationServiceClient{cc}
}

func (c *citizenNotificationServiceClient) SetNotificationPref(ctx context.Context, in *NotificationPref, opts ...grpc.CallOption) (*Void, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Void)
	err := c.cc.Invoke(ctx, CitizenNotificationService_SetNotificationPref_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *citizenNotificationServiceClient) UpdateNotificationPref(ctx context.Context, in *NotificationPref, opts ...grpc.CallOption) (*Void, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Void)
	err := c.cc.Invoke(ctx, CitizenNotificationService_UpdateNotificationPref_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *citizenNotificationServiceClient) DeleteNotificationPref(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Void, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Void)
	err := c.cc.Invoke(ctx, CitizenNotificationService_DeleteNotificationPref_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CitizenNotificationServiceServer is the server API for CitizenNotificationService service.
// All implementations must embed UnimplementedCitizenNotificationServiceServer
// for forward compatibility
type CitizenNotificationServiceServer interface {
	SetNotificationPref(context.Context, *NotificationPref) (*Void, error)
	UpdateNotificationPref(context.Context, *NotificationPref) (*Void, error)
	DeleteNotificationPref(context.Context, *ById) (*Void, error)
	mustEmbedUnimplementedCitizenNotificationServiceServer()
}

// UnimplementedCitizenNotificationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCitizenNotificationServiceServer struct {
}

func (UnimplementedCitizenNotificationServiceServer) SetNotificationPref(context.Context, *NotificationPref) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetNotificationPref not implemented")
}
func (UnimplementedCitizenNotificationServiceServer) UpdateNotificationPref(context.Context, *NotificationPref) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNotificationPref not implemented")
}
func (UnimplementedCitizenNotificationServiceServer) DeleteNotificationPref(context.Context, *ById) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNotificationPref not implemented")
}
func (UnimplementedCitizenNotificationServiceServer) mustEmbedUnimplementedCitizenNotificationServiceServer() {
}

// UnsafeCitizenNotificationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CitizenNotificationServiceServer will
// result in compilation errors.
type UnsafeCitizenNotificationServiceServer interface {
	mustEmbedUnimplementedCitizenNotificationServiceServer()
}

func RegisterCitizenNotificationServiceServer(s grpc.ServiceRegistrar, srv CitizenNotificationServiceServer) {
	s.RegisterService(&CitizenNotificationService_ServiceDesc, srv)
}

func _CitizenNotificationService_SetNotificationPref_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotificationPref)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CitizenNotificationServiceServer).SetNotificationPref(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CitizenNotificationService_SetNotificationPref_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CitizenNotificationServiceServer).SetNotificationPref(ctx, req.(*NotificationPref))
	}
	return interceptor(ctx, in, info, handler)
}

func _CitizenNotificationService_UpdateNotificationPref_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotificationPref)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CitizenNotificationServiceServer).UpdateNotificationPref(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CitizenNotificationService_UpdateNotificationPref_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CitizenNotificationServiceServer).UpdateNotificationPref(ctx, req.(*NotificationPref))
	}
	return interceptor(ctx, in, info, handler)
}

func _CitizenNotificationService_DeleteNotificationPref_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CitizenNotificationServiceServer).DeleteNotificationPref(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CitizenNotificationService_DeleteNotificationPref_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CitizenNotificationServiceServer).DeleteNotificationPref(ctx, req.(*ById))
	}
	return interceptor(ctx, in, info, handler)
}

// CitizenNotificationService_ServiceDesc is the grpc.ServiceDesc for CitizenNotificationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CitizenNotificationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "citizen.CitizenNotificationService",
	HandlerType: (*CitizenNotificationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetNotificationPref",
			Handler:    _CitizenNotificationService_SetNotificationPref_Handler,
		},
		{
			MethodName: "UpdateNotificationPref",
			Handler:    _CitizenNotificationService_UpdateNotificationPref_Handler,
		},
		{
			MethodName: "DeleteNotificationPref",
			Handler:    _CitizenNotificationService_DeleteNotificationPref_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "city_submodule/citizen/notification.proto",
}
